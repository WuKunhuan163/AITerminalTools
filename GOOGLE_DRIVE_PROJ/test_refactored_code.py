#!/usr/bin/env python3
"""
ÊµãËØïÈáçÊûÑÂêéÁöÑGoogle Drive Shell‰ª£Á†Å
È™åËØÅÊ®°ÂùóÂØºÂÖ•ÂíåÂü∫Êú¨ÂäüËÉΩÊòØÂê¶Ê≠£Â∏∏
"""

import sys
import os
from pathlib import Path

def test_module_imports():
    """ÊµãËØïÊ®°ÂùóÂØºÂÖ•"""
    print("üîÑ ÊµãËØïÊ®°ÂùóÂØºÂÖ•...")
    
    try:
        # ÊµãËØïÂêÑ‰∏™Ê®°ÂùóÁöÑÂØºÂÖ•
        from modules.shell_management import ShellManagement
        from modules.file_operations import FileOperations
        from modules.cache_manager import CacheManager
        from modules.remote_commands import RemoteCommands
        from modules.path_resolver import PathResolver
        from modules.sync_manager import SyncManager
        from modules.file_utils import FileUtils
        from modules.validation import Validation
        from modules.verification import Verification
        
        print("‚úÖ ÊâÄÊúâÊ®°ÂùóÂØºÂÖ•ÊàêÂäü")
        return True
        
    except ImportError as e:
        print(f"‚ùå Ê®°ÂùóÂØºÂÖ•Â§±Ë¥•: {e}")
        return False
    except Exception as e:
        print(f"‚ùå ÂÖ∂‰ªñÂØºÂÖ•ÈîôËØØ: {e}")
        return False

def test_module_initialization():
    """ÊµãËØïÊ®°ÂùóÂàùÂßãÂåñ"""
    print("\nüîÑ ÊµãËØïÊ®°ÂùóÂàùÂßãÂåñ...")
    
    try:
        from modules.shell_management import ShellManagement
        from modules.cache_manager import CacheManager
        
        # Ê®°Êãüdrive_service
        mock_drive_service = type('MockDriveService', (), {})()
        
        # ÊµãËØïÂàùÂßãÂåñ
        shell_mgr = ShellManagement(mock_drive_service)
        cache_mgr = CacheManager(mock_drive_service)
        
        print("‚úÖ Ê®°ÂùóÂàùÂßãÂåñÊàêÂäü")
        return True
        
    except Exception as e:
        print(f"‚ùå Ê®°ÂùóÂàùÂßãÂåñÂ§±Ë¥•: {e}")
        return False

def test_function_existence():
    """ÊµãËØïÂÖ≥ÈîÆÂáΩÊï∞ÊòØÂê¶Â≠òÂú®"""
    print("\nüîÑ ÊµãËØïÂÖ≥ÈîÆÂáΩÊï∞Â≠òÂú®ÊÄß...")
    
    try:
        from modules.shell_management import ShellManagement
        from modules.file_operations import FileOperations
        from modules.cache_manager import CacheManager
        
        # Ê£ÄÊü•ÂÖ≥ÈîÆÊñπÊ≥ïÊòØÂê¶Â≠òÂú®
        shell_methods = ['load_shells', 'save_shells', 'create_shell', 'list_shells']
        file_methods = ['cmd_ls', 'cmd_cd', 'cmd_upload', 'cmd_download']
        cache_methods = ['load_cache_config', 'is_cached_file_up_to_date']
        
        mock_drive_service = type('MockDriveService', (), {})()
        
        shell_mgr = ShellManagement(mock_drive_service)
        file_ops = FileOperations(mock_drive_service)
        cache_mgr = CacheManager(mock_drive_service)
        
        # Ê£ÄÊü•ÊñπÊ≥ïÂ≠òÂú®
        for method in shell_methods:
            if not hasattr(shell_mgr, method):
                raise AttributeError(f"ShellManagementÁº∫Â∞ëÊñπÊ≥ï: {method}")
        
        for method in file_methods:
            if not hasattr(file_ops, method):
                raise AttributeError(f"FileOperationsÁº∫Â∞ëÊñπÊ≥ï: {method}")
                
        for method in cache_methods:
            if not hasattr(cache_mgr, method):
                raise AttributeError(f"CacheManagerÁº∫Â∞ëÊñπÊ≥ï: {method}")
        
        print("‚úÖ ÂÖ≥ÈîÆÂáΩÊï∞Â≠òÂú®ÊÄßÊ£ÄÊü•ÈÄöËøá")
        return True
        
    except Exception as e:
        print(f"‚ùå ÂáΩÊï∞Â≠òÂú®ÊÄßÊ£ÄÊü•Â§±Ë¥•: {e}")
        return False

def test_original_vs_refactored_api():
    """ÊØîËæÉÂéüÂßãÁ±ªÂíåÈáçÊûÑÁ±ªÁöÑAPIÂÖºÂÆπÊÄß"""
    print("\nüîÑ ÊµãËØïAPIÂÖºÂÆπÊÄß...")
    
    try:
        # ÂØºÂÖ•ÂéüÂßãÁ±ª
        from google_drive_shell import GoogleDriveShell as OriginalShell
        
        # Ëé∑ÂèñÂéüÂßãÁ±ªÁöÑÂÖ¨ÂÖ±ÊñπÊ≥ï
        original_methods = [method for method in dir(OriginalShell) 
                          if not method.startswith('_') and callable(getattr(OriginalShell, method))]
        
        print(f"ÂéüÂßãÁ±ªÂÖ¨ÂÖ±ÊñπÊ≥ïÊï∞Èáè: {len(original_methods)}")
        print(f"‰∏ªË¶ÅÊñπÊ≥ï: {original_methods[:10]}...")  # ÊòæÁ§∫Ââç10‰∏™ÊñπÊ≥ï
        
        # Ê£ÄÊü•ÈáçÊûÑÂêéÁöÑÊ®°ÂùóÊòØÂê¶ÂåÖÂê´Ëøô‰∫õÊñπÊ≥ï
        from modules import (
            ShellManagement, FileOperations, CacheManager, RemoteCommands,
            PathResolver, SyncManager, FileUtils, Validation, Verification
        )
        
        # ÁªüËÆ°ÂêÑÊ®°ÂùóÁöÑÊñπÊ≥ïÊï∞Èáè
        module_classes = [
            ('ShellManagement', ShellManagement),
            ('FileOperations', FileOperations), 
            ('CacheManager', CacheManager),
            ('RemoteCommands', RemoteCommands),
            ('PathResolver', PathResolver),
            ('SyncManager', SyncManager),
            ('FileUtils', FileUtils),
            ('Validation', Validation),
            ('Verification', Verification)
        ]
        
        total_refactored_methods = 0
        for name, cls in module_classes:
            methods = [m for m in dir(cls) if not m.startswith('_') and m != '__init__']
            total_refactored_methods += len(methods)
            print(f"{name}: {len(methods)} ‰∏™ÊñπÊ≥ï")
        
        print(f"ÈáçÊûÑÂêéÊÄªÊñπÊ≥ïÊï∞Èáè: {total_refactored_methods}")
        print("‚úÖ APIÂÖºÂÆπÊÄßÊ£ÄÊü•ÂÆåÊàê")
        return True
        
    except Exception as e:
        print(f"‚ùå APIÂÖºÂÆπÊÄßÊ£ÄÊü•Â§±Ë¥•: {e}")
        return False

def test_code_quality():
    """ÊµãËØï‰ª£Á†ÅË¥®Èáè"""
    print("\nüîÑ ÊµãËØï‰ª£Á†ÅË¥®Èáè...")
    
    try:
        # Ê£ÄÊü•Ê®°ÂùóÊñá‰ª∂Â§ßÂ∞è
        modules_dir = Path("modules")
        total_lines = 0
        
        for module_file in modules_dir.glob("*.py"):
            if module_file.name == "__init__.py":
                continue
                
            with open(module_file, 'r', encoding='utf-8') as f:
                lines = len(f.readlines())
                total_lines += lines
                print(f"{module_file.name}: {lines} Ë°å")
        
        # Ê£ÄÊü•ÂéüÂßãÊñá‰ª∂Â§ßÂ∞è
        with open("google_drive_shell.py", 'r', encoding='utf-8') as f:
            original_lines = len(f.readlines())
        
        print(f"\nÂéüÂßãÊñá‰ª∂: {original_lines} Ë°å")
        print(f"ÈáçÊûÑÂêéÊÄªË°åÊï∞: {total_lines} Ë°å")
        print(f"‰ª£Á†ÅÂàÜÂâ≤ÊïàÁéá: {(total_lines/original_lines)*100:.1f}%")
        
        # Ê£ÄÊü•ÊúÄÂ§ßÊ®°ÂùóÂ§ßÂ∞è
        max_module_size = 0
        largest_module = ""
        
        for module_file in modules_dir.glob("*.py"):
            if module_file.name == "__init__.py":
                continue
                
            with open(module_file, 'r', encoding='utf-8') as f:
                lines = len(f.readlines())
                if lines > max_module_size:
                    max_module_size = lines
                    largest_module = module_file.name
        
        print(f"ÊúÄÂ§ßÊ®°Âùó: {largest_module} ({max_module_size} Ë°å)")
        
        if max_module_size < 3000:  # ÊØè‰∏™Ê®°ÂùóÂ∫îËØ•Â∞è‰∫é3000Ë°å
            print("‚úÖ ‰ª£Á†ÅÂàÜÂâ≤Ë¥®ÈáèËâØÂ•Ω")
            return True
        else:
            print("‚ö†Ô∏è  Êüê‰∫õÊ®°Âùó‰ªçÁÑ∂ËøáÂ§ßÔºåÂèØËÉΩÈúÄË¶ÅËøõ‰∏ÄÊ≠•ÂàÜÂâ≤")
            return True
            
    except Exception as e:
        print(f"‚ùå ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•Â§±Ë¥•: {e}")
        return False

def main():
    """‰∏ªÊµãËØïÂáΩÊï∞"""
    print("üöÄ ÂºÄÂßãÊµãËØïÈáçÊûÑÂêéÁöÑGoogle Drive Shell‰ª£Á†Å\n")
    
    tests = [
        ("Ê®°ÂùóÂØºÂÖ•", test_module_imports),
        ("Ê®°ÂùóÂàùÂßãÂåñ", test_module_initialization), 
        ("ÂáΩÊï∞Â≠òÂú®ÊÄß", test_function_existence),
        ("APIÂÖºÂÆπÊÄß", test_original_vs_refactored_api),
        ("‰ª£Á†ÅË¥®Èáè", test_code_quality)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"‚ùå {test_name} ÊµãËØïÂ§±Ë¥•")
        except Exception as e:
            print(f"‚ùå {test_name} ÊµãËØïÂºÇÂ∏∏: {e}")
    
    print(f"\nüìä ÊµãËØïÁªìÊûú: {passed}/{total} ÈÄöËøá")
    
    if passed == total:
        print("üéâ ÊâÄÊúâÊµãËØïÈÄöËøáÔºÅÈáçÊûÑÊàêÂäüÔºÅ")
        return True
    else:
        print("‚ö†Ô∏è  ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåÈúÄË¶ÅËøõ‰∏ÄÊ≠•Ë∞ÉËØï")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 