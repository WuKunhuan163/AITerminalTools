[
    {
        "type": "text",
        "text": "GaussianObject: High-Quality 3D Object Reconstruction from Four Views with Gaussian Splatting ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "CHEN YANG∗, MoE Key Lab of Artificial Intelligence, AI Institute, SJTU, China   \nSIKUANG LI∗, MoE Key Lab of Artificial Intelligence, AI Institute, SJTU, China   \nJIEMIN FANG†, Huawei Inc., China   \nRUOFAN LIANG, University of Toronto, Canada   \nLINGXI XIE, Huawei Inc., China   \nXIAOPENG ZHANG, Huawei Inc., China   \nWEI SHEN‡, MoE Key Lab of Artificial Intelligence, AI Institute, SJTU, China   \nQI TIAN, Huawei Inc., China ",
        "page_idx": 0
    },
    {
        "type": "image",
        "img_path": "images/2d9ad8e3e84e0ceabbd9075f3232ca7fcb1bd2d1ea36a413088970c612d06809.jpg",
        "image_caption": [
            "Fig. 1. We introduce GaussianObject, a framework capable of reconstructing high-quality 3D objects from only 4 images with Gaussian splatting. Gaus sianObject demonstrates superior performance over previous state-of-the-art (SOTA) methods on challenging objects. "
        ],
        "image_footnote": [],
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Reconstructing and rendering 3D objects from highly sparse views is of critical importance for promoting applications of 3D vision techniques and improving user experience. However, images from sparse views only contain very limited 3D information, leading to two significant challenges: 1) Difficulty in building multi-view consistency as images for matching are too few; 2) Partially omitted or highly compressed object information as view coverage is insufficient. To tackle these challenges, we propose GaussianObject, a framework to represent and render the 3D object with Gaussian splatting that achieves high rendering quality with only 4 input images. We first introduce techniques of visual hull and floater elimination, which explicitly inject structure priors into the initial optimization process to help build multi-view consistency, yielding a coarse 3D Gaussian representation. Then we construct a Gaussian repair model based on diffusion models to supplement the omitted object information, where Gaussians are further refined. We design a self-generating strategy to obtain image pairs for training the repair model. We further design a COLMAP-free variant, where pre-given accurate camera poses are not required, which achieves competitive quality and facilitates wider applications. GaussianObject is evaluated on several challenging datasets, including MipNeRF360, OmniObject3D, OpenIllumination, and our-collected unposed images, achieving superior performance from only four views and significantly outperforming previous SOTA methods. Our demo is available at https:// gaussianobject.github.io/ , and the code has been released at https:// github.com/ GaussianObject/ GaussianObject. ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "CCS Concepts: • Computing methodologies → Reconstruction; Rendering; Point-based models. ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Additional Key Words and Phrases: Sparse view reconstruction, 3D Gaussian Splatting, ControlNet, Visual hull, Novel view synthesis ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "ACM Reference Format: ",
        "text_level": 1,
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Chen Yang, Sikuang Li, Jiemin Fang, Ruofan Liang, Lingxi Xie, Xiaopeng Zhang, Wei Shen, and Qi Tian. 2024. GaussianObject: High-Quality 3D Object ",
        "page_idx": 0
    },
    {
        "type": "text",
        "text": "Reconstruction from Four Views with Gaussian Splatting. ACM Trans. Graph. 43, 6 (December 2024), 28 pages. https://doi.org/10.1145/3687759 ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "1 INTRODUCTION ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Reconstructing and rendering 3D objects from 2D images has been a long-standing and important topic, which plays critical roles in a vast range of real-life applications. One key factor that impedes users, especially ones without expert knowledge, from widely using these techniques is that usually dozens of multi-view images need to be captured, which is cumbersome and sometimes impractical. Efficiently reconstructing high-quality 3D objects from highly sparse captured images is of great value for expediting downstream applications such as 3D asset creation for game/movie production and AR/VR products. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "In recent years, a series of methods [Guangcong et al. 2023; Jain et al. 2021; Niemeyer et al. 2022; Shi et al. 2024b; Song et al. 2023b; Yang et al. 2023; Zhou and Tulsiani 2023; Zhu et al. 2024] have been proposed to reduce reliance on dense captures. However, it is still challenging to produce high-quality 3D objects when the views become extremely sparse, e.g. only 4 images in a 360◦ range, as shown in Fig. 1. We delve into the task of sparse-view reconstruction and discover two main challenges behind it. The first one lies in the difficulty of building multi-view consistency from highly sparse input. The 3D representation is easy to overfit the input images and degrades into fragmented pixel patches of training views without reasonable structures. The other challenge is that with sparse captures in a 360◦ range, some content of the object can be inevitably omitted or severely compressed when observed from extreme views1. The omitted or compressed information is impossible or hard to be reconstructed in 3D only from the input images. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "To tackle the aforementioned challenges, we introduce GaussianObject, a novel framework designed to reconstruct high-quality 3D objects from as few as 4 input images. We choose 3D Gaussian splatting (3DGS) [Kerbl et al. 2023] as the basic representation as it is fast and, more importantly, explicit enough. Benefiting from its point-like structure, we design several techniques for introducing object structure priors, e.g. the basic/rough geometry of the object, to help build multi-view consistency, including visual hull [Laurentini 1994] to locate Gaussians within the object outline and floater elimination to remove outliers. To erase artifacts caused by omitted or highly compressed object information, we propose a Gaussian repair model driven by 2D large diffusion models [Rombach et al. 2022], translating corrupted rendered images into high-fidelity ones. As normal diffusion models lack the ability to repair corrupted images, we design self-generating strategies to construct image pairs to tune the diffusion models, including rendering images from leaveone-out training models and adding 3D noises to Gaussian attributes. Images generated from the repair model can be used to refine the 3D Gaussians optimized with structure priors, where the rendering quality can be further improved. To further extend GaussianObject to practical applications, we introduce a COLMAP-free variant of GaussianObject (CF-GaussianObject), which achieves competitive reconstruction performance on challenging datasets with only four input images without inputting accurate camera parameters. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Our contributions are summarized as follows: ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "• We optimize 3D Gaussians from highly sparse views using explicit structure priors, introducing techniques of visual hull for initialization and floater elimination for training. • We propose a Gaussian repair model based on diffusion models to remove artifacts caused by omitted or highly compressed information, where the rendering quality can be further improved. • The overall framework GaussianObject consistently outperforms current SOTA methods on several challenging real-world datasets, both qualitatively and quantitatively. A COLMAP-free variant is further presented for wider applications, weakening the requirement of accurate camera poses. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "2 RELATED WORK ",
        "text_level": 1,
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "Vanilla NeRF struggles in sparse settings. Techniques like Deng et al. [2022]; Roessle et al. [2022]; Somraj et al. [2024, 2023]; Somraj and Soundararajan [2023] use Structure from Motion (SfM) [Schönberger and Frahm 2016] derived visibility or depth and mainly focus on closely aligned views. Xu et al. [2022] uses ground truth depth maps, which are costly to obtain in real-world images. Some methods [Guangcong et al. 2023; Song et al. 2023b] estimate depths with monocular depth estimation models [Ranftl et al. 2021, 2022] or sensors, but these are often too coarse. Jain et al. [2021] uses a vision-language model [Radford et al. 2021] for unseen view rendering, but the semantic consistency is too high-level to guide lowlevel reconstruction. Shi et al. [2024b] combines a deep image prior with factorized NeRF, effectively capturing overall appearance but missing fine details in input views. Priors based on information theory [Kim et al. 2022], continuity [Niemeyer et al. 2022], symmetry [Seo et al. 2023], and frequency regularization [Song et al. 2023a; Yang et al. 2023] are only effective for specific scenarios, limiting their further applications. Besides, there are some methods [Jang and Agapito 2024; Jiang et al. 2024; Xu et al. 2024c; Zou et al. 2024] that employ Vision Transformer (ViT) [Dosovitskiy et al. 2021] to reduce the requirements for constructing NeRFs and Gaussians. ",
        "page_idx": 1
    },
    {
        "type": "text",
        "text": "The recent progress in diffusion models has spurred notable advancements in 3D applications. Dreamfusion [Poole et al. 2023] proposes Score Distillation Sampling (SDS) for distilling NeRFs with 2D priors from a pre-trained diffusion model for 3D object generation from text prompts. It has been further refined for textto-3D [Chen et al. 2023; Lin et al. 2023; Metzer et al. 2023; Shi et al. 2024a; Tang et al. 2024b; Wang et al. 2023a,b; Yi et al. 2024] and 3D/4D editing [Haque et al. 2023; Shao et al. 2024] by various studies, demonstrating the versatility of 2D diffusion models in 3D contexts. Burgess et al. [2024]; Chan et al. [2023]; Liu et al. [2023c]; Müller et al. [2024]; Pan et al. [2024]; Zhu and Zhuang [2024] have adapted these methods for 3D generation and view synthesis from a single image, while they often have strict input requirements and can produce overly saturated images. In sparse reconstruction, approaches like DiffusioNeRF [Wynn and Turmukhambetov 2023], SparseFusion [Zhou and Tulsiani 2023], Deceptive-NeRF [Liu et al. 2023b], ReconFusion [Wu et al. 2024] and CAT3D [Gao et al. 2024] integrate diffusion models with NeRFs. Recently, Large reconstruction models (LRMs) [Hong et al. 2024; Li et al. 2024; Tang et al. 2024a; Wang et al. 2024b; Wei et al. 2024; Weng et al. 2023; Xu et al. 2024a,b; Zhang et al. 2024] also achieve 3D reconstruction from highly sparse views. Though effective in generating images fast, these methods encounter issues with large pretraining, strict requirements on view distribution and object location, and difficulty in handling real-world captures. ",
        "page_idx": 1
    },
    {
        "type": "image",
        "img_path": "images/62e8284b8ab9a7f950b12b9750c11c062ab28f92d2e70b5709637e0a039b7293.jpg",
        "image_caption": [
            "Fig. 2. Overview of GaussianObject. (a) We initialize 3D Gaussians by constructing a visual hull with camera parameters and masked images, which are optimized with Lref and refined through floater elimination. (b) We use a novel ‘leave-one-out’ strategy and add 3D noise to Gaussians to generate corrupted Gaussian renderings. These renderings, paired with their corresponding reference images, facilitate the training of the Gaussian repair model employing Ltune. For details please refer to Fig. 3. (c) Once trained, the Gaussian repair model is frozen and used to correct views that need to be rectified. These views are identified through distance-aware sampling. The repaired images and reference images are used to further optimize 3D Gaussians with Lrep and Lref. "
        ],
        "image_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "While 3DGS shows strong power in novel view synthesis, it struggles with sparse 360◦ views similar to NeRF. Inspired by few-shot NeRFs, methods [Charatan et al. 2024; Chung et al. 2023; Paliwal et al. 2024; Xiong et al. 2023; Zhu et al. 2024] have been developed for sparse 360◦ reconstruction. However, they still severely rely on the SfM points. Our GaussianObject proposes structure-prior-aided Gaussian initialization to tackle this issue, drastically reducing the required input views to only 4, a significant improvement compared with over 20 views required by FSGS [Zhu et al. 2024]. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3 METHOD ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "The subsequent sections detail the methodology: Sec. 3.1 reviews foundational techniques; Sec. 3.2 introduces our overall framework; Sec. 3.3 describes how we apply the structure priors for initial optimization; Sec. 3.4 details the setup of our Gaussian repair model; Sec. 3.5 illustrates the repair of 3D Gaussians using this model and Sec. 3.6 elucidates the COLMAP-free version of GaussianObject. To facilitate a better understanding, all key mathematical symbols and their corresponding meanings are listed in Table 1. ",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3.1 Preliminary ",
        "text_level": 1,
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "3D Gaussian Splatting. 3D Gaussian Splatting [Kerbl et al. 2023] represents 3D scenes with 3D Gaussians. Each 3D Gaussian is composed of the center location ??, rotation quaternion ??, scaling vector ??, opacity , and spherical harmonic (SH) coefficients . Thus, a sceneis parameterized as a set of Gaussians G = {???? : ????, ????, ????, ????, ??ℎ?? }????=1. ControlNet. Diffusion models are generative models that sample from a data distribution ??(??0), beginning with Gaussian noise ?? and using various sampling schedulers. They operate by reversing a discrete-time stochastic noise addition process {???? }????=0 with a diffusion model ???? (???? −1|???? ) trained to approximate ??(???? −1|???? ), where ?? ∈ [0,?? ] is the noise level and ?? is the learnable parameters. Substituting ??0 with its latent code ??0 from a Variational Autoencoder (VAE) [Kingma and Welling 2014] leads to the development of Latent Diffusion Models (LDM) [Rombach et al. 2022]. ControlNet [Zhang et al. 2023a] further enhances the generative process with additional image conditioning by integrating a network structure similar to the diffusion model, optimized with the loss function: ",
        "page_idx": 2
    },
    {
        "type": "table",
        "img_path": "images/a14b4cdd3c70f96e2310ecc6ecdcbe3a52981b6f88a453181bdedfa1210df041.jpg",
        "table_caption": [
            "Table 1. List of Key Mathematical Symbols "
        ],
        "table_footnote": [],
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 2
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/333ac67e908acadb10d5c94ea89c1ce08648098ed00ee783ee2592e034e94baa.jpg",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where ??tex and ??img denote the text and image conditioning respectively, and ???? is the Gaussian noise inferred by the diffusion model with parameter ??, ??¯1:?? ∈ (0, 1]?? is a decreasing sequence associated with the noise-adding process. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "3.2 Overall Framework ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Given a sparse collection of ?? reference images ?? ref = {???? }????=1,captured within a 360◦ range and encompassing one object, along with the corresponding camera intrinsics2 ??ref = {???? }????=1, extrinsics Πref = {???? }????=1 and masks ?? ref = {???? }????=1 of the object, our target is to obtain a 3D representation G, which can achieve photo-realistic rendering ?? = G (?? |{????, ????, ???? }????=1) from any viewpoint. To achieve this, we employ the 3DGS model for its simplicity for structure priors embedding and fast rendering capabilities. The process begins with initializing 3D Gaussians using a visual hull [Laurentini 1994], followed by optimization with floater elimination, enhancing the structure of Gaussians. Then we design self-generating strategies to supply sufficient image pairs for constructing a Gaussian repair model, which is used to rectify incomplete object information. The overall framework is shown in Fig. 2. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "3.3 Initial Optimization with Structure Priors ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Sparse views, especially for only 4 images, provide limited 3D information for reconstruction. In this case, SfM points, which are the key for 3DGS initialization, are often absent. Besides, insufficient multi-view consistency leads to ambiguity among shape and appearance, resulting in many floaters during reconstruction. We propose two techniques to initially optimize the 3D Gaussian representation, which take full advantage of structure priors from the limited views and result in a satisfactory outline of the object. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Initialization with Visual Hull. To better leverage object structure information from limited reference images, we utilize the view frustums and object masks to create a visual hull as a geometric scaf fold for initializing our 3D Gaussians. Compared with the limited number of SfM points in extremely sparse settings, the visual hull provides more structure priors that help build multiview consistency by excluding unreasonable Gaussian distributions. The cost of the visual hull is just several masks derived from sparse 360◦ images, which can be easily acquired using current segmentation models such as SAM [Kirillov et al. 2023]. Specifically, points are randomly initialized within the visual hull using rejection sampling: we project uniformly sampled random 3D points onto image planes and retain those within the intersection of all image-space masks. Point colors are averaged from bilinearly interpolated pixel colors across reference image projections. Then we transform these 3D points into 3D Gaussians. For each point, we assign its position as ?? and convert its color into ??ℎ. The mean distance between adjacent points forms the scale ??, while the rotation ?? is set to a unit quaternion as default. The opacity ?? is initialized to a constant value. This initialization strategy relies on the initial masks. Despite potential inaccuracies in these masks or unrepresented concavities by the visual hull, we observed that subsequent optimization processes reliably yield high-quality reconstructions. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Floater Elimination. While the visual hull builds a coarse estimation of the object geometry, it often contains regions that do not belong to the object due to the inadequate coverage of reference images. These regions usually appear to be floaters, damaging the quality of novel view synthesis. These floaters are problematic as the optimization process struggles to adjust them due to insufficient observational data regarding their position and appearance. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "To mitigate this issue, we utilize the statistical distribution of distances among the 3D Gaussians to distinguish the primary object and the floaters. This is implemented by the K-Nearest Neighbors (KNN) algorithm, which calculates the average distance to the nearest ?? Gaussians for each element in G?? . We then establish a normative range by computing the mean and standard deviation of these distances. Based on statistical analysis, we exclude Gaussians whose mean neighbor distances exceed the adaptive threshold ?? = mean + ???? std. This thresholding process is repeated periodically throughout optimization, where ???? is linearly decreased to 0 to refine the scene representation progressively. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Initial Optimization The optimization of G?? incorporates color, mask, and monocular depth losses. The color loss combines L1 and D-SSIM losses from 3D Gaussian Splatting: ",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/13027b8d78f50ae600e53e0a542adadb3a9b9d27c594c2c249223b4dc3d78193.jpg",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where ?? is the rendering and ??ref is the corresponding reference image. A binary cross entropy (BCE) loss [Jadon 2020] is applied as mask loss: ",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/5b395e2179b5d6301bcf4738d9aa67ee1cdce0ca72edbf95022343fb96405f0d.jpg",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where ?? denotes the object mask. A shift and scale invariant depth loss is utilized to guide geometry: ",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/f195ec2a58fa7a8ca50f68ec71712973bb62d87321acbb8f92ad5bb6368a3a2d.jpg",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where ??∗ and ??∗ are per-frame rendered depths and monocularly pred estimated depths [Bhat et al. 2023] respectively. The depth values are computed following a normalization strategy [Ranftl et al. 2020]: ",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/0affe0ab782e7d3d50753527ee5fdd00337b9b3ead9ffb1a339d30e90b970a9e.jpg",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where ?? denotes the number of valid pixels. The overall loss combines these components: ",
        "page_idx": 3
    },
    {
        "type": "equation",
        "img_path": "images/c712a1674ed858d848eafae0803774f41927bd11916ebd89bc5a09d0c84edfaa.jpg",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "where ??SSIM, ??m, and ??d control the magnitude of each term. Thanks to the efficient initialization, our training speed is remarkably fast. It only takes 1 minute to train a coarse Gaussian representation G?? at a resolution of 779 × 520. ",
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "3.4 Gaussian Repair Model Setup ",
        "text_level": 1,
        "page_idx": 3
    },
    {
        "type": "text",
        "text": "Combining visual hull initialization and floater elimination significantly enhances 3DGS performance for NVS in sparse 360◦ contexts. While the fidelity of our reconstruction is generally passable, G?? still suffers in regions that are poorly observed, regions with occlusion, or even unobserved regions. These challenges loom over the completeness of the reconstruction, like the sword of Damocles. ",
        "page_idx": 3
    },
    {
        "type": "image",
        "img_path": "images/683dc7261b6963940c025abcb26b91f59818d0e24cd6b34780a338f53e3997f5.jpg",
        "image_caption": [
            "Fig. 3. Illustration of Gaussian repair model setup. First, we add Gaussian noise ?? to a reference image ??ref to form a noisy image. Next, this noisy image along with ??ref’s corresponding degraded image ??′ are passed to a pre-trained fixed ControlNet with learnable LoRA layers to predict a noise distribution ???? . We use the differences among ?? and ???? to fine-tune the parameters in LoRA layers. "
        ],
        "image_footnote": [],
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "To mitigate these issues, we introduce a Gaussian repair model R designed to correct the aberrant distribution of G?? . Our R takes corrupted rendered images ??′ (G??, ??nov) as input and outputs photorealistic and high-fidelity images ??ˆ. This image repair capability can be used to refine the 3D Gaussians, leading to learning better structure and appearance details. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Sufficient data pairs are essential for training R but are rare in existing datasets. To this end, we adopt two main strategies for generating adequate image pairs, i.e., leave-one-out training and adding 3D noises. For leave-one-out training, we build ?? subsets from the ?? input images, each containing ?? − 1 reference images and 1 left-out image ??out. Then we train ?? 3DGS models with reference images of these subsets, termed as {G???? }?? −1??=0 . After specific iterations, we use the left-out image ??out to continue training each Gaussian model {G???? }?? −1??=0 into {Gˆ???? }?? −1??=0 . Throughout this process, are stored to form the image pairs along with left-out image ??out for training the repair model. Note that training these left-out models costs little, with less than ?? minutes in total. The other strategy is to add 3D noises ???? onto Gaussian attributes. The ???? are derived from the mean Δ and variance Δ of attribute differences between{G???? }?? −1??=0 and {Gˆ???? }?? −1??=0 . This allows us to render more degraded Gaussians, resulting in extensive image pairs (?? ′, ?? ref). ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "We inject LoRA weights and fine-tune a pre-trained ControlNet [Zhang et al. 2023b] using the generated image pairs as our Gaussian repair model. The training procedure is shown in Fig. 3. The loss function, based on Eq. 1, is defined as: ",
        "page_idx": 4
    },
    {
        "type": "equation",
        "img_path": "images/f0f1981595496154a977d1d473925d5779c76f5895396d167014c27ceceec5a3.jpg",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "where ??tex denotes an object-specific language prompt, defined as “a photo of [V],” as per Dreambooth [Ruiz et al. 2023]. Specifically, we inject LoRA layers into the text encoder, image condition branch, and U-Net for fine-tuning. Please refer to the Appendix for details. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "3.5 Gaussian Repair with Distance-Aware Sampling ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "After training R, we distill its target object priors into G?? to refine its rendering quality. The object information near the reference views is abundant. This observation motivates designing distance as a criterion in identifying views that need rectification, leading to distance-aware sampling. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Specifically, we establish an elliptical path aligned with the training views and focus on a central point. Arcs near Π???? ?? , where we assume G?? renders high-quality images, form the reference path. The other arcs, yielding renderings, need to be rectified and define the repair path, as depicted in Fig. 4. In each iteration, novel viewpoints, ???? ∈ Πnov, are randomly sampled among the repair path. For each ???? , we render the corresponding image ?? ?? (G??, ???? ), encode it to be E (?? ?? ) by the latent diffusion encoder E and pass E (?? ?? ) to the image conditioning branch of R. Simultaneously, a cloned E (?? ?? ) is disturbed into a noisy latent ???? : ",
        "page_idx": 4
    },
    {
        "type": "equation",
        "img_path": "images/672b3cc6420ec31ffc1dd508c1c844f7ec2ae65ec23038ef5a1a3bdd293c28eb.jpg",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "which is similar to SDEdit [Meng et al. 2022]. We then generate a sample ??ˆ?? from R by running DDIM sampling [Song et al. 2021] over ?? = ⌊50 · ???? ⌋ steps and forwarding the diffusion decoder D: ",
        "page_idx": 4
    },
    {
        "type": "equation",
        "img_path": "images/bceee5b5ed8a11a69160998623ca39033ec7820a87c1ab5035ce82ef91d499f9.jpg",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "where E and D are from the VAE model used by the diffusion model. The distances from ?? ?? to Π???? ?? is used to weight the reliability of ??ˆ?? , guiding the optimization with a loss function: ",
        "page_idx": 4
    },
    {
        "type": "equation",
        "img_path": "images/f5126d6b236f7d10c021d150db5ab87ffe366842b749a3c5a2b25af69fdbf537.jpg",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Here, ???? denotes the perceptual similarity metric LPIPS [Zhang et al. 2018], ?? (??) is a noise-level modulated weighting function from DreamFusion [Poole et al. 2023], ??(???? ) denotes a distancebased weighting function, and ??max is the maximal distance among neighboring reference viewpoints. To ensure coherence between 3D Gaussians and reference images, we continue training G?? with Lref during the whole Gaussian repair procedure. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "3.6 COLMAP-Free GaussianObject (CF-GaussianObject) ",
        "text_level": 1,
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "Current SOTA sparse view reconstruction methods rely on precise camera parameters, including intrinsics and poses, obtained through an SfM pipeline with dense input, limiting their usability in daily applications. This process can be cumbersome and unreliable in sparse-view scenarios where matched features are insufficient for accurate reconstruction. ",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "To overcome this limitation, we introduce an advanced sparse matching model, DUSt3R [Wang et al. 2024a], into GaussianObject to enable COLMAP-free sparse 360◦ reconstruction. Given reference input images ?? ref, DUSt3R is formulated as: ",
        "page_idx": 4
    },
    {
        "type": "equation",
        "img_path": "images/4fdbf958599fdfbe437a1c6620538d3b20c816f24d529a4d86589e3317793e5e.jpg",
        "page_idx": 4
    },
    {
        "type": "text",
        "text": "where P is an estimated coarse point cloud of the scene, and Πˆ ref, ??ˆ ref are the predicted camera poses and intrinsics of ?? ref, respectively. For CF-GaussianObject, we modify the intrinsic recovery module within DUSt3R, allowing ???? ∈ ?? ref to share the same intrinsic ??ˆ . This adaption enables the retrieval of P, Πˆ ref, and ??ˆ . Besides, we apply structural priors with a visual hull to P to initialize 3D Gaussians. After initialization, we optimize Πˆ ref and the initialized 3D Gaussians using ?? ref and depth maps rendered from P simultaneously. Besides, we introduce a regularization loss to constrain deviations from Πˆ ref, enhancing the robustness of the optimization. After optimization, the 3D Gaussians and camera parameters are used for constructing the Gaussian repair model and Gaussian repairing process as described in Sec. 3.4 and Sec. 3.5. Refer to the Appendix for more details. ",
        "page_idx": 4
    },
    {
        "type": "image",
        "img_path": "images/42d81142fed6eaeefbeae4abd57bf10130bf635a0bd5bf353e6077e65ae625d2.jpg",
        "image_caption": [
            "Fig. 4. Illustration of our distance-aware sampling. Blue and red indicate the reference and repair path, respectively. "
        ],
        "image_footnote": [],
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "4 EXPERIMENTS ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "4.1 Implementation Details ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Our framework, illustrated in Fig. 2, is based on 3DGS [Kerbl et al. 2023] and threestudio [Guo et al. 2023]. The 3DGS model is trained for 10k iterations in the initial optimization, with periodic floater elimination every 500 iterations. The monocular depth for Ld is predicted by ZoeDepth [Bhat et al. 2023]. We use a ControlNetTile [Zhang et al. 2023b] model based on stable diffusion v1.5 [Rombach et al. 2022] as our repair model’s backbone. LoRA [Hu et al. 2022] weights, injected into the text-encoder and transformer blocks using minLoRA [Chang 2023], are trained for 1800 steps at a LoRA rank of 64 and a learning rate of 10−3. G?? is trained for another 4k iterations during distance-aware sampling. For the first 2800 iterations, optimization involves both a reference image and a repaired novel view image, with the weight of Lrep progressively decayed from 1.0 to 0.1. The final 1200-step training only involves reference views. The whole process of GaussianObject takes about 30 minutes on a GeForce RTX 3090 GPU for 4 input images at a 779 × 520 resolution. For more details, please refer to the Appendix. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "4.2 Datasets ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "We evaluate GaussianObject on three datasets suited for sparseview 360◦ object reconstruction with varying input views, including Mip-NeRF360 [Barron et al. 2021], OmniObject3D [Wu et al. 2023], and OpenIllumination [Liu et al. 2023a]. Additionally, we use an iPhone 13 to capture four views of some daily-life objects to show the COLMAP-free performance. SAM [Kirillov et al. 2023] is used to obtain masks of the target objects. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "4.3 Evaluation ",
        "text_level": 1,
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Sparse 360◦ Reconstruction Performance. We evaluate the performance of GaussianObject against several reconstruction baselines, including the vanilla 3DGS [Kerbl et al. 2023] with random initialization and DVGO [Sun et al. 2022], and various few-view reconstruction models on the three datasets. Compared methods of RegNeRF [Niemeyer et al. 2022], DietNeRF [Jain et al. 2021], SparseNeRF [Guangcong et al. 2023], and ZeroRF [Shi et al. 2024b] utilize a variety of regularization techniques. Besides, FSGS [Zhu et al. 2024] is also built upon Gaussian splatting with SfM-point initialization. Note that we supply extra SfM points to FSGS so that it can work with the highly sparse 360◦ setting. Since camera pose estimation often suffers from scale and positional errors compared to ground truth, we adopt the evaluation used for COLMAP-free methods under dense view settings [Fu et al. 2024; Wang et al. 2021]. All models are trained using publicly released codes. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Table 2 and 3 present the view-synthesis performance of GaussianObject compared to existing methods on the MipNeRF360, OmniObject3D, and OpenIllumination datasets. Experiments show that GaussianObject consistently achieves SOTA results in all datasets, especially in the perceptual quality – LPIPS. Although GaussianObject is designed to address extremely sparse input views, it still outperforms other methods with more input views, i.e. 6 and 9, further proving the effectiveness. Notably, GaussianObject excels with as few as 4 views and significantly improves LPIPS over FSGS from 0.0951 to 0.0498 on MipNeRF360. This improvement is critical, as LPIPS is a key indicator of perceptual quality [Park et al. 2021]. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Fig. 5 and Fig. 6 illustrate rendering results of various methods across different datasets with only 4 input views. We observe that GaussianObject achieves significantly better visual quality and fidelity than the competing models. We find that implicit representation based methods and random initialized 3DGS fail in extremely sparse settings, typically reconstructing objects as fragmented pixel patches. This confirms the effectiveness of integrating structure priors with explicit representations. Although ZeroRF exhibits competitive PSNR and SSIM on OpenIllumination, its renderings are blurred and lack details, as shown in Fig. 6. In contrast, GaussianObject demonstrates fine-detailed reconstruction. This superior perceptual quality highlights the effectiveness of the Gaussian repair model. It is highly suggested to refer to comprehensive video comparisons included in supplementary materials. ",
        "page_idx": 5
    },
    {
        "type": "text",
        "text": "Comparison with LRMs. We further compare GaussianObject to recently popular LRM-like feed-forward reconstruction methods, i.e. LGM [Tang et al. 2024a] and TriplaneGaussian (TGS) [Zou et al. 2024] which are publicly available. The comparisons are shown in Table 4 on the challenging MipNeRF360 dataset. Given that TriplaneGaussian accommodates only a single image input, we feed it with frontal views of objects. LGM requires placing the target object at the world coordinate origin with cameras oriented towards it at an elevation of 0◦ and azimuths of 0◦, 90◦, 180◦, and 270◦. Therefore, we report two versions of LGM – LGM-4 which uses four sparse captures as input views directly, and LGM-1 which uses MVDream [Shi et al. 2024a] to generate images that comply with LGM’s setup requirements following its original manner. Results show that the strict requirements among input views significantly hinder the sparse reconstruction performance of LRM-like models with in-the-wild captures. In contrast, GaussianObject does not require extensive pre-training, has no restrictions on input views, and can reconstruct any complex object in daily life. ",
        "page_idx": 5
    },
    {
        "type": "image",
        "img_path": "images/e4725e0aefb869ab84e2577dcba85be072e7bf4bf6d82b51b5d5138c6679f36b.jpg",
        "image_caption": [
            "Fig. 5. Qualitative examples on the MipNeRF360 and OmniObject3D dataset with 4 input views. Many methods fail to reach a coherent 3D representation, resulting in floaters and disjoint pixel patches. A pure white image indicates a total miss of the object by the corresponding method, usually caused by overfitting the input images. "
        ],
        "image_footnote": [],
        "page_idx": 6
    },
    {
        "type": "table",
        "img_path": "images/7da0708f65b3e251cd74a4756a0570fadbd940cc2f63588692845f934878bb1d.jpg",
        "table_caption": [
            "Table 2. Comparisons with varying input views. LPIPS∗ = LPIPS × 102 throughout this paper. Best results are highlighted as 1st , 2nd and 3rd "
        ],
        "table_footnote": [],
        "page_idx": 7
    },
    {
        "type": "table",
        "img_path": "images/980ee4742c78b5ab0f6834a45e6163a62833f032e7f06ece0d32c112adc32230.jpg",
        "table_caption": [
            "Table 3. Quantitative comparisons on the OpenIllumination dataset. Methods with † means the metrics are from the ZeroRF paper [Shi et al. 2024b]. "
        ],
        "table_footnote": [],
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "Performance of CF-GaussianObject. CF-GaussianObject is evaluated on the MipNeRF360 and OmniObject3D datasets, with results detailed in Table 2 and Fig. 5. Though CF-GaussianObject exhibits some performance degradation, it eliminates the need for precise camera parameters, significantly enhancing its practical utility. Its performance remains competitive compared to other SOTA methods that depend on accurate camera parameters. Notably, we observe that the performance degradation correlates with an increase in the number of input views, primarily due to declines in the accuracy of DUSt3R’s estimates as the number of views rises. As demonstrated in Fig. 7, comparative experiments on smartphone-captured images confirm the superior reconstruction capabilities and visual quality of CF-GaussianObject. More visualization of CF-GaussianObject can be found in our appendix and supplementary materials. ",
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "4.4 Ablation Studies ",
        "text_level": 1,
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "Key Components. We conduct a series of experiments to validate the effectiveness of each component. The following experiments are performed on MipNeRF360 with 4 input views, and averaged metric values are reported. We disable visual hull initialization, floater elimination, Gaussian repair model setup, and Gaussian repair process once at a time to verify their effectiveness. The Gaussian repair loss is further compared with the Score Distillation Sampling (SDS) loss [Poole et al. 2023], and the depth loss is ablated. The results, presented in Table 5 and Fig. 9, indicate that each element significantly contributes to performance, with their absence leading to a decline in results. Particularly, omitting visual hull initialization results in a marked decrease in performance. Gaussian repair model setup and the Gaussian repair process significantly enhance visual quality, and the absence of either results in a substantial decline in perceptual quality as shown in Fig. 8. Contrary to its effectiveness in text-to-3D or single image-to-3D, SDS results in unstable optimization and diminished performance in our context. The depth loss shows marginal promotion, mainly for LPIPS and SSIM. We apply it to enhance the robustness of our framework. ",
        "page_idx": 7
    },
    {
        "type": "image",
        "img_path": "images/4d6ae5dada83fed73309551e76c63e7119c7bbe8c3de32fccb94de655c248003.jpg",
        "image_caption": [
            "Fig. 6. Qualitative results on the OpenIllumination dataset. Although ZeroRF shows competitive PSNR and SSIM, its renderings often appear blurred. While GaussianObject outperforms in restoring fine details, achieving a significant perceptual quality advantage. "
        ],
        "image_footnote": [],
        "page_idx": 7
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 7
    },
    {
        "type": "image",
        "img_path": "images/6af5374918c1379fe35743fe9bc3d22b55c3ffc63c75c28a9e84ecbcac59e53b.jpg",
        "image_caption": [
            "Fig. 7. Qualitative results on our-collected images captured by an iPhone 13. We equip other SOTAs with camera parameters predicted by DUSt3R for fair comparison. The results demonstrate the superior performance of our CF-GaussianObject among casually captured images, with fine details and higher visual quality. "
        ],
        "image_footnote": [],
        "page_idx": 8
    },
    {
        "type": "image",
        "img_path": "images/ed168aa155103ed2e3f1c6ff06388fc9469319b375ecfa91ad3fc2928df89a2e.jpg",
        "image_caption": [
            "Fig. 8. Importance of our Gaussian repair model setup. Without the Gaussian repair process or the finetuning of the ControlNet, the renderings exhibit noticeable artifacts and lack of details, particularly in areas with insufficient view coverage. Zoom in for better comparison. ",
            "Fig. 10. Qualitative comparisons by ablating different Gaussian repair model setup methods. “MDepth” denotes the repair model with masked monocular depth estimation as the condition. "
        ],
        "image_footnote": [],
        "page_idx": 8
    },
    {
        "type": "image",
        "img_path": "images/67cd62dd7e801c3dc916526af667a854cde8cbe44ac4fbc66e55c04c01cca79b.jpg",
        "image_caption": [
            "Fig. 9. Ablation study on different components. “VH” denotes for visual hull and “FE” is floater elimination. The “GT” image is from a test view. "
        ],
        "image_footnote": [],
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "Structure of Repair Model. Our repair model is designed to generate photo-realistic and 3D-consistent views of the target object. This is achieved by leave-one-out training and perturbing the attributes of 3D Gaussians to create image pairs for fine-tuning a pre-trained image-conditioned ControlNet. Similarities can be found in Dreambooth [Ruiz et al. 2023], which aims to generate specific subject images from limited inputs. To validate the efficacy of our design, we evaluate the samples generated by our Gaussian repair model and other alternative structures. The first is implemented with Dreambooth [Raj et al. 2023; Ruiz et al. 2023], which embeds target object priors with semantic modifications. To make the output corresponding to the target object, we utilize SDEdit [Meng et al. 2022] to guide the image generation. Inspired by Song et al. [2023b], the second introduces a monocular depth conditioning ControlNet [Zhang et al. 2023a], which is fine-tuned using data pair generation as in Sec. 3.4. We also assess the performance using masked depth conditioning. Furthermore, we consider Zero123-XL [Deitke et al. 2023; Liu et al. 2023c], a well-known single-image reconstruction model requiring object-centered input images with precise camera rotations and positions. Here, we manually align the coordinate system and select the closest image to the novel viewpoint as its reference. ",
        "page_idx": 8
    },
    {
        "type": "table",
        "img_path": "images/607f6f519c19fc7e51f0abcca64903aaec9f5da432331446cfdd51b82fb4c307.jpg",
        "table_caption": [
            "Table 4. Quantitative comparisons with LRM-like methods on MipNeRF360. "
        ],
        "table_footnote": [],
        "page_idx": 8
    },
    {
        "type": "table",
        "img_path": "images/1d5b8b4b6f3bcd3887273c1377063debca45928d4098eb5a498070be0bd66957.jpg",
        "table_caption": [
            "Table 5. Ablation study on key components. "
        ],
        "table_footnote": [],
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 8
    },
    {
        "type": "text",
        "text": "The results, as shown in Table 6 and Fig. 10, reveal that semantic modifications proposed by Dreambooth alone fail in 3D-coherent synthesis. Monocular depth conditioning, whether with or without masks, despite some improvements, still struggles with depth roughness and artifacts. Zero123-XL, while generating visually acceptable images, the multi-view structure consistency is lacking. In contrast, our model excels in both 3D consistency and detail fidelity, outperforming others qualitatively and quantitatively. ",
        "page_idx": 8
    },
    {
        "type": "image",
        "img_path": "images/4f6f6d4837d1e55193f00272fa0a72d48160c7acdd40b2c752e0497d1f99ff72.jpg",
        "image_caption": [
            "Fig. 11. Ablation on Training View Number. Experiments are conducted on scene kitchen in the MipNeRF360 dataset. "
        ],
        "image_footnote": [],
        "page_idx": 9
    },
    {
        "type": "table",
        "img_path": "images/02d4912878a836d1c5890d9a4cadfe2a45b8bbc418788d41f6cda69d4d776265.jpg",
        "table_caption": [
            "Table 6. Ablation study about alternatives of the Gaussian repair model. "
        ],
        "table_footnote": [],
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Effect of View Numbers. We design experiments to evaluate the advantage of our method over different training views. As shown in Fig. 11, GaussianObject consistently outperforms vanilla 3DGS in varying numbers of training views. Besides, GaussianObject with 24 training views achieves performance comparable to that of 3DGS trained on all views (243). ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "4.5 Limitations and Future Work ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "GaussianObject demonstrates notable performance in sparse 360◦ ob ject reconstruction, yet several avenues for future research exist. In regions completely unobserved or insufficiently observed, our repair model may generate hallucinations, i.e., it may produce non-existent details, as shown in Fig. 12. However, these regions are inherently non-deterministic in information, and other methods also struggle in these areas. Additionally, due to the high sparsity level, our model is currently limited in capturing view-dependent effects. With such sparse data, our method cannot differentiate whether the appearance is view-dependent or inherent. Consequently, it ‘bakes in’ the view-dependent features (like reflected white light) onto the surface, resulting in an inability to display view-dependent appearance from novel viewpoints correctly and leading to some unintended artifacts as demonstrated in Fig. 13. Fine-tuning diffusion models with more view-dependent data may be a promising direction. Besides, integrating GaussianObject with surface reconstruction methods like 2DGS [Huang et al. 2024] and GOF [Yu et al. 2024] is a promising direction. Furthermore, CF-GaussianObject achieves competitive performance, but there is still a performance gap compared to precise camera parameters. An interesting exploration is to leverage confidence maps from matching methods for more accurate pose estimation. ",
        "page_idx": 9
    },
    {
        "type": "image",
        "img_path": "images/8c5b199362ea7538e1f525305aa3951ad3a97b8509764ea0e4dfe7c569e4a957.jpg",
        "image_caption": [
            "Fig. 12. Hallucinations of non-existent details. GaussianObject may fabricate visually reasonable details in areas with little information. For instance, the hole in the stone vase is filled in. "
        ],
        "image_footnote": [],
        "page_idx": 9
    },
    {
        "type": "image",
        "img_path": "images/4edf23de78f80bedade9e9628d7de04677faf669c945a7438bc5741c054af036.jpg",
        "image_caption": [
            "Fig. 13. Comparative visualization highlighting the challenge of reconstructing view-dependent appearance with only four input images. "
        ],
        "image_footnote": [],
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "5 CONCLUSION ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "In summary, GaussianObject is a novel framework designed for highquality 3D object reconstruction from extremely sparse 360◦ views, based on 3DGS with real-time rendering capabilities. We design two main methods to achieve this goal: structure-prior-aided optimization for facilitating the multi-view consistency construction and a Gaussian repair model to remove artifacts caused by omitted or highly compressed object information. We also provide a COLMAPfree version that can be easily applied in real life with competitive performance. We sincerely hope that GaussianObject can advance daily-life applications of reconstructing 3D objects, markedly reducing capture requirements and broadening application prospects. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "ACKNOWLEDGMENTS ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "This work was supported by the NSFC under Grant 62322604 and 62176159, and in part by the Shanghai Municipal Science and Technology Major Project under Grant 2021SHZDZX0102. The authors express gratitude to the anonymous reviewers for their valuable feedback and to Deyu Wang for his assistance with figure drawing and Blender support. ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "REFERENCES ",
        "text_level": 1,
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "Jonathan T. Barron, Ben Mildenhall, Dor Verbin, Pratul P. Srinivasan, and Peter Hedman. 2021. Mip-NeRF 360: Unbounded Anti-Aliased Neural Radiance Fields. 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR) (2021), 5460–5469.   \nShariq Farooq Bhat, Reiner Birkl, Diana Wofk, Peter Wonka, and Matthias Müller. 2023. Zoedepth: Zero-shot transfer by combining relative and metric depth. arXiv preprint arXiv:2302.12288 (2023).   \nJames Burgess, Kuan-Chieh Wang, and Serena Yeung. 2024. Viewpoint Textual Inversion: Unleashing Novel View Synthesis with Pretrained 2D Diffusion Models. ECCV (2024).   \nJiazhong Cen, Zanwei Zhou, Jiemin Fang, Chen Yang, Wei Shen, Lingxi Xie, Dongsheng Jiang, Xiaopeng Zhang, and Qi Tian. 2023. Segment Anything in 3D with NeRFs. In NeurIPS.   \nEric R Chan, Koki Nagano, Matthew A Chan, Alexander W Bergman, Jeong Joon Park, Axel Levy, Miika Aittala, Shalini De Mello, Tero Karras, and Gordon Wetzstein. 2023.   \nJonathan Chang. 2023. minLoRA. https://github.com/cccntu/minLoRA.   \nDavid Charatan, Sizhe Lester Li, Andrea Tagliasacchi, and Vincent Sitzmann. 2024. pixelsplat: 3d gaussian splats from image pairs for scalable generalizable 3d reconstruction. In CVPR. 19457–19467.   \nRui Chen, Yongwei Chen, Ningxin Jiao, and Kui Jia. 2023. Fantasia3D: Disentangling Geometry and Appearance for High-quality Text-to-3D Content Creation. In Proceedings of the IEEE/CVF International Conference on Computer Vision (ICCV). 22246–22256.   \nJaeyoung Chung, Jeongtaek Oh, and Kyoung Mu Lee. 2023. Depth-regularized optimization for 3d gaussian splatting in few-shot images. arXiv preprint arXiv:2311.13398 (2023).   \nMatt Deitke, Ruoshi Liu, Matthew Wallingford, Huong Ngo, Oscar Michel, Aditya Kusupati, Alan Fan, Christian Laforte, Vikram Voleti, Samir Yitzhak Gadre, Eli VanderBilt, Aniruddha Kembhavi, Carl Vondrick, Georgia Gkioxari, Kiana Ehsani, Ludwig Schmidt, and Ali Farhadi. 2023. Objaverse-XL: A Universe of 10M+ 3D Objects. arXiv preprint arXiv:2307.05663 (2023).   \nKangle Deng, Andrew Liu, Jun-Yan Zhu, and Deva Ramanan. 2022. Depth-supervised NeRF: Fewer Views and Faster Training for Free. In 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 12872–12881. https://doi.org/10. 1109/CVPR52688.2022.01254   \nAlexey Dosovitskiy, Lucas Beyer, Alexander Kolesnikov, Dirk Weissenborn, Xiaohua Zhai, Thomas Unterthiner, Mostafa Dehghani, Matthias Minderer, Georg Heigold, Sylvain Gelly, Jakob Uszkoreit, and Neil Houlsby. 2021. An Image is Worth 16x16 Words: Transformers for Image Recognition at Scale. In International Conference on Learning Representations. https://openreview.net/forum?id=YicbFdNTTy   \nZhiwen Fan, Wenyan Cong, Kairun Wen, Kevin Wang, Jian Zhang, Xinghao Ding, Danfei Xu, Boris Ivanovic, Marco Pavone, Georgios Pavlakos, Zhangyang Wang, and Yue Wang. 2024. InstantSplat: Unbounded Sparse-view Pose-free Gaussian Splatting in 40 Seconds. arXiv:2403.20309 [cs.CV]   \nYang Fu, Sifei Liu, Amey Kulkarni, Jan Kautz, Alexei A Efros, and Xiaolong Wang. 2024. Colmap-free 3d gaussian splatting. CVPR (2024).   \nRuiqi Gao, Aleksander Holynski, Philipp Henzler, Arthur Brussee, Ricardo MartinBrualla, Pratul Srinivasan, Jonathan T Barron, and Ben Poole. 2024. CAT3D: Create Anything in 3D with Multi-View Diffusion Models. arXiv preprint arXiv:2405.10314 (2024).   \nGuangcong, Zhaoxi Chen, Chen Change Loy, and Ziwei Liu. 2023. SparseNeRF: Distilling Depth Ranking for Few-shot Novel View Synthesis. IEEE/CVF International Conference on Computer Vision (ICCV) (2023).   \nYuan-Chen Guo, Ying-Tian Liu, Ruizhi Shao, Christian Laforte, Vikram Voleti, Guan Luo, Chia-Hao Chen, Zi-Xin Zou, Chen Wang, Yan-Pei Cao, and Song-Hai Zhang. 2023. threestudio: A unified framework for 3D content generation. https://github. com/threestudio-project/threestudio.   \nAyaan Haque, Matthew Tancik, Alexei Efros, Aleksander Holynski, and Angjoo Kanazawa. 2023. Instruct-NeRF2NeRF: Editing 3D Scenes with Instructions. In Proceedings of the IEEE/CVF International Conference on Computer Vision.   \nYicong Hong, Kai Zhang, Jiuxiang Gu, Sai Bi, Yang Zhou, Difan Liu, Feng Liu, Kalyan Sunkavalli, Trung Bui, and Hao Tan. 2024. Lrm: Large reconstruction model for single image to 3d. ICLR (2024).   \nEdward J Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, and Weizhu Chen. 2022. Lora: Low-rank adaptation of large language models. ICLR (2022).   \nBinbin Huang, Zehao Yu, Anpei Chen, Andreas Geiger, and Shenghua Gao. 2024. 2D Gaussian Splatting for Geometrically Accurate Radiance Fields. In SIGGRAPH 2024 Conference Papers. Association for Computing Machinery. https://doi.org/10.1145/ 3641519.3657428   \nShruti Jadon. 2020. A survey of loss functions for semantic segmentation. In 2020 IEEE Conference on Computational Intelligence in Bioinformatics and Computational Biology (CIBCB). 1–7. https://doi.org/10.1109/CIBCB48159.2020.9277638   \nAjay Jain, Matthew Tancik, and Pieter Abbeel. 2021. Putting NeRF on a Diet: Semantically Consistent Few-Shot View Synthesis. In 2021 IEEE/CVF International Conference on Computer Vision (ICCV). 5865–5874. https://doi.org/10.1109/ICCV48922.2021. 00583   \nWonbong Jang and Lourdes Agapito. 2024. NViST: In the Wild New View Synthesis from a Single Image with Transformers. CVPR (2024).   \nHanwen Jiang, Zhenyu Jiang, Yue Zhao, and Qixing Huang. 2024. LEAP: Liberate Sparse-view 3D Modeling from Camera Poses. ICLR (2024).   \nBernhard Kerbl, Georgios Kopanas, Thomas Leimkühler, and George Drettakis. 2023. 3D Gaussian Splatting for Real-Time Radiance Field Rendering. ACM Transactions on Graphics 42, 4 (2023).   \nMijeong Kim, Seonguk Seo, and Bohyung Han. 2022. Infonerf: Ray entropy minimization for few-shot neural volume rendering. In CVPR. 12912–12921.   \nDiederik P. Kingma and Max Welling. 2014. Auto-Encoding Variational Bayes. In 2nd International Conference on Learning Representations, ICLR 2014, Banff, AB, Canada, April 14-16, 2014, Conference Track Proceedings, Yoshua Bengio and Yann LeCun (Eds.). http://arxiv.org/abs/1312.6114   \nAlexander Kirillov, Eric Mintun, Nikhila Ravi, Hanzi Mao, Chloe Rolland, Laura Gustafson, Tete Xiao, Spencer Whitehead, Alexander C Berg, Wan-Yen Lo, et al. 2023. Segment anything. ICCV (2023).   \nA. Laurentini. 1994. The visual hull concept for silhouette-based image understanding. IEEE Transactions on Pattern Analysis and Machine Intelligence 16, 2 (1994), 150–162. https://doi.org/10.1109/34.273735   \nJiahao Li, Hao Tan, Kai Zhang, Zexiang Xu, Fujun Luan, Yinghao Xu, Yicong Hong, Kalyan Sunkavalli, Greg Shakhnarovich, and Sai Bi. 2024. Instant3d: Fast text-to-3d with sparse-view generation and large reconstruction model. ICLR (2024).   \nChen-Hsuan Lin, Jun Gao, Luming Tang, Towaki Takikawa, Xiaohui Zeng, Xun Huang, Karsten Kreis, Sanja Fidler, Ming-Yu Liu, and Tsung-Yi Lin. 2023. Magic3D: HighResolution Text-to-3D Content Creation. In IEEE Conference on Computer Vision and Pattern Recognition (CVPR).   \nIsabella Liu, Linghao Chen, Ziyang Fu, Liwen Wu, Haian Jin, Zhong Li, Chin Ming Ryan Wong, Yi Xu, Ravi Ramamoorthi, Zexiang Xu, and Hao Su. 2023a. OpenIllumination: A Multi-Illumination Dataset for Inverse Rendering Evaluation on Real Objects. NeuRIPS 2023.   \nRuoshi Liu, Rundi Wu, Basile Van Hoorick, Pavel Tokmakov, Sergey Zakharov, and Carl Vondrick. 2023c. Zero-1-to-3: Zero-shot One Image to 3D Object. In Proceedings of the IEEE/CVF International Conference on Computer Vision (ICCV). 9298–9309.   \nXinhang Liu, Shiu-hong Kao, Jiaben Chen, Yu-Wing Tai, and Chi-Keung Tang. 2023b. Deceptive-NeRF: Enhancing NeRF Reconstruction using Pseudo-Observations from Diffusion Models. arXiv preprint arXiv:2305.15171 (2023).   \nIlya Loshchilov and Frank Hutter. 2019. Decoupled Weight Decay Regularization. In International Conference on Learning Representations. https://openreview.net/forum? id=Bkg6RiCqY7   \nHidenobu Matsuki, Riku Murai, Paul H. J. Kelly, and Andrew J. Davison. 2024. Gaussian Splatting SLAM. In CVPR.   \nChenlin Meng, Yutong He, Yang Song, Jiaming Song, Jiajun Wu, Jun-Yan Zhu, and Stefano Ermon. 2022. Sdedit: Guided image synthesis and editing with stochastic differential equations. ICLR (2022).   \nGal Metzer, Elad Richardson, Or Patashnik, Raja Giryes, and Daniel Cohen-Or. 2023. Latent-NeRF for Shape-Guided Generation of 3D Shapes and Textures. In 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 12663– 12673. https://doi.org/10.1109/CVPR52729.2023.01218   \nNorman Müller, Katja Schwarz, Barbara Rössle, Lorenzo Porzi, Samuel Rota Bulò, Matthias Nießner, and Peter Kontschieder. 2024. MultiDiff: Consistent Novel View Synthesis from a Single Image. In CVPR. 10258–10268.   \nMichael Niemeyer, Jonathan T. Barron, Ben Mildenhall, Mehdi S. M. Sajjadi, Andreas Geiger, and Noha Radwan. 2022. RegNeRF: Regularizing Neural Radiance Fields for View Synthesis from Sparse Inputs. In 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 5470–5480. https://doi.org/10.1109/CVPR52688. 2022.00540   \nAvinash Paliwal, Wei Ye, Jinhui Xiong, Dmytro Kotovenko, Rakesh Ranjan, Vikas Chandra, and Nima Khademi Kalantari. 2024. CoherentGS: Sparse Novel View Synthesis with Coherent 3D Gaussians. ECCV (2024).   \nZijie Pan, Zeyu Yang, Xiatian Zhu, and Li Zhang. 2024. Fast Dynamic 3D Object Generation from a Single-view Video. arXiv preprint arXiv 2401.08742 (2024).   \nKeunhong Park, Utkarsh Sinha, Peter Hedman, Jonathan T. Barron, Sofien Bouaziz, Dan B. Goldman, Ricardo Martin-Brualla, and Steven M. Seitz. 2021. HyperNeRF: a higher-dimensional representation for topologically varying neural radiance fields. ACM Trans. Graph. 40, 6 (2021), 238:1–238:12.   \nBen Poole, Ajay Jain, Jonathan T Barron, and Ben Mildenhall. 2023. Dreamfusion: Text-to-3d using 2d diffusion. ICLR (2023).   \nAlec Radford, Jong Wook Kim, Chris Hallacy, Aditya Ramesh, Gabriel Goh, Sandhini Agarwal, Girish Sastry, Amanda Askell, Pamela Mishkin, Jack Clark, Gretchen Krueger, and Ilya Sutskever. 2021. Learning Transferable Visual Models From Natural Language Supervision. In Proceedings of the 38th International Conference on Machine Learning. PMLR, 8748–8763. https://proceedings.mlr.press/v139/radford21a.html   \nAmit Raj, Srinivas Kaza, Ben Poole, Michael Niemeyer, Nataniel Ruiz, Ben Mildenhall, Shiran Zada, Kfir Aberman, Michael Rubinstein, Jonathan Barron, et al. 2023. Dreambooth3d: Subject-driven text-to-3d generation. ICCV (2023).   \nRené Ranftl, Alexey Bochkovskiy, and Vladlen Koltun. 2021. Vision Transformers for Dense Prediction. ICCV (2021).   \nRené Ranftl, Katrin Lasinger, David Hafner, Konrad Schindler, and Vladlen Koltun. 2020. Towards robust monocular depth estimation: Mixing datasets for zero-shot cross-dataset transfer. IEEE transactions on pattern analysis and machine intelligence 44, 3 (2020), 1623–1637.   \nRené Ranftl, Katrin Lasinger, David Hafner, Konrad Schindler, and Vladlen Koltun. 2022. Towards Robust Monocular Depth Estimation: Mixing Datasets for Zero-Shot CrossDataset Transfer. IEEE Transactions on Pattern Analysis and Machine Intelligence 44, 3 (2022).   \nBarbara Roessle, Jonathan T Barron, Ben Mildenhall, Pratul P Srinivasan, and Matthias Nießner. 2022. Dense depth priors for neural radiance fields from sparse input views. In CVPR. 12892–12901.   \nRobin Rombach, Andreas Blattmann, Dominik Lorenz, Patrick Esser, and Björn Ommer. 2022. High-Resolution Image Synthesis with Latent Diffusion Models. In 2022 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 10674– 10685. https://doi.org/10.1109/CVPR52688.2022.01042   \nNataniel Ruiz, Yuanzhen Li, Varun Jampani, Yael Pritch, Michael Rubinstein, and Kfir Aberman. 2023. Dreambooth: Fine tuning text-to-image diffusion models for subjectdriven generation. In CVPR. 22500–22510.   \nJohannes Lutz Schönberger and Jan-Michael Frahm. 2016. Structure-from-Motion Revisited. In Conference on Computer Vision and Pattern Recognition (CVPR).   \nSeunghyeon Seo, Yeonjin Chang, and Nojun Kwak. 2023. Flipnerf: Flipped reflection rays for few-shot novel view synthesis. In Proceedings of the IEEE/CVF International Conference on Computer Vision. 22883–22893.   \nRuizhi Shao, Jingxiang Sun, Cheng Peng, Zerong Zheng, Boyao Zhou, Hongwen Zhang, and Yebin Liu. 2024. Control4D: Efficient 4D Portrait Editing with Text. CVPR (2024).   \nRuoxi Shi, Xinyue Wei, Cheng Wang, and Hao Su. 2024b. ZeroRF: Fast Sparse View 360° Reconstruction with Zero Pretraining. CVPR (2024).   \nYichun Shi, Peng Wang, Jianglong Ye, Long Mai, Kejie Li, and Xiao Yang. 2024a. MVDream: Multi-view Diffusion for 3D Generation. ICLR (2024).   \nNagabhushan Somraj, Adithyan Karanayil, Sai Harsha Mupparaju, and Rajiv Soundararajan. 2024. Simple-RF: Regularizing Sparse Input Radiance Fields with Simpler Solutions. arXiv preprint arXiv:2404.19015 (2024).   \nNagabhushan Somraj, Adithyan Karanayil, and Rajiv Soundararajan. 2023. SimpleNeRF: Regularizing Sparse Input Neural Radiance Fields with Simpler Solutions. In SIGGRAPH Asia 2023 Conference Papers (SA ’23). Association for Computing Machinery, New York, NY, USA, 1–11. https://doi.org/10.1145/3610548.3618188   \nNagabhushan Somraj and Rajiv Soundararajan. 2023. ViP-NeRF: Visibility Prior for Sparse Input Neural Radiance Fields. (August 2023). https://doi.org/10.1145/3588432. 3591539   \nJiaming Song, Chenlin Meng, and Stefano Ermon. 2021. Denoising diffusion implicit models. ICLR (2021).   \nJiuhn Song, Seonghoon Park, Honggyu An, Seokju Cho, Min-Seop Kwak, Sungjin Cho, and Seungryong Kim. 2023b. DaRF: Boosting Radiance Fields from Sparse Inputs with Monocular Depth Adaptation. 2023 NIPS (2023).   \nLiangchen Song, Zhong Li, Xuan Gong, Lele Chen, Zhang Chen, Yi Xu, and Junsong Yuan. 2023a. Harnessing Low-Frequency Neural Fields for Few-Shot View Synthesis. arXiv preprint arXiv:2303.08370 (2023).   \nCheng Sun, Min Sun, and Hwann-Tzong Chen. 2022. Direct Voxel Grid Optimization: Super-fast Convergence for Radiance Fields Reconstruction. In CVPR.   \nJiaxiang Tang, Zhaoxi Chen, Xiaokang Chen, Tengfei Wang, Gang Zeng, and Ziwei Liu. 2024a. LGM: Large Multi-View Gaussian Model for High-Resolution 3D Content Creation. ECCV (2024).   \nJiaxiang Tang, Jiawei Ren, Hang Zhou, Ziwei Liu, and Gang Zeng. 2024b. DreamGaussian: Generative Gaussian Splatting for Efficient 3D Content Creation. ICLR (2024).   \nHaochen Wang, Xiaodan Du, Jiahao Li, Raymond A. Yeh, and Greg Shakhnarovich. 2023a. Score Jacobian Chaining: Lifting Pretrained 2D Diffusion Models for 3D Generation. In 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 12619–12629. https://doi.org/10.1109/CVPR52729.2023.01214   \nPeng Wang, Hao Tan, Sai Bi, Yinghao Xu, Fujun Luan, Kalyan Sunkavalli, Wenping Wang, Zexiang Xu, and Kai Zhang. 2024b. PF-LRM: Pose-Free Large Reconstruction Model for Joint Pose and Shape Prediction. ICLR (2024).   \nShuzhe Wang, Vincent Leroy, Yohann Cabon, Boris Chidlovskii, and Jerome Revaud. 2024a. DUSt3R: Geometric 3D Vision Made Easy. CVPR (2024).   \nZhengyi Wang, Cheng Lu, Yikai Wang, Fan Bao, Chongxuan Li, Hang Su, and Jun Zhu. 2023b. ProlificDreamer: High-Fidelity and Diverse Text-to-3D Generation with Variational Score Distillation. In Advances in Neural Information Processing Systems (NeurIPS).   \nZirui Wang, Shangzhe Wu, Weidi Xie, Min Chen, and Victor Adrian Prisacariu. 2021. NeRF–: Neural radiance fields without known camera parameters. arXiv preprint arXiv:2102.07064 (2021).   \nXinyue Wei, Kai Zhang, Sai Bi, Hao Tan, Fujun Luan, Valentin Deschaintre, Kalyan Sunkavalli, Hao Su, and Zexiang Xu. 2024. MeshLRM: Large Reconstruction Model for High-Quality Mesh. arXiv preprint arXiv:2404.12385 (2024).   \nZhenzhen Weng, Jingyuan Liu, Hao Tan, Zhan Xu, Yang Zhou, Serena Yeung-Levy, and Jimei Yang. 2023. Template-Free Single-View 3D Human Digitalization with Diffusion-Guided LRM. Preprint (2023).   \nRundi Wu, Ben Mildenhall, Philipp Henzler, Keunhong Park, Ruiqi Gao, Daniel Watson, Pratul P Srinivasan, Dor Verbin, Jonathan T Barron, Ben Poole, et al. 2024. ReconFusion: 3D Reconstruction with Diffusion Priors. CVPR (2024).   \nTong Wu, Jiarui Zhang, Xiao Fu, Yuxin Wang, Jiawei Ren, Liang Pan, Wayne Wu, Lei Yang, Jiaqi Wang, Chen Qian, Dahua Lin, and Ziwei Liu. 2023. OmniObject3D: Large-Vocabulary 3D Object Dataset for Realistic Perception, Reconstruction and Generation. 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR) (2023), 803–814. https://api.semanticscholar.org/CorpusID:255998491   \nJamie Wynn and Daniyar Turmukhambetov. 2023. DiffusioNeRF: Regularizing Neural Radiance Fields with Denoising Diffusion Models. In 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 4180–4189. https://doi.org/10. 1109/CVPR52729.2023.00407   \nHaolin Xiong, Sairisheek Muttukuru, Rishi Upadhyay, Pradyumna Chari, and Achuta Kadambi. 2023. SparseGS: Real-Time 360° Sparse View Synthesis using Gaussian Splatting. Arxiv (2023).   \nDejia Xu, Yifan Jiang, Peihao Wang, Zhiwen Fan, Humphrey Shi, and Zhangyang Wang. 2022. SinNeRF: Training Neural Radiance Fields on Complex Scenes from a Single Image. In Computer Vision – ECCV 2022 (Lecture Notes in Computer Science), Shai Avidan, Gabriel Brostow, Moustapha Cissé, Giovanni Maria Farinella, and Tal Hassner (Eds.). Springer Nature Switzerland, Cham, 736–753. https://doi.org/10. 1007/978-3-031-20047-2_42   \nDejia Xu, Ye Yuan, Morteza Mardani, Sifei Liu, Jiaming Song, Zhangyang Wang, and Arash Vahdat. 2024c. AGG: Amortized Generative 3D Gaussians for Single Image to 3D. arXiv preprint 2401.04099 (2024).   \nYinghao Xu, Zifan Shi, Wang Yifan, Hansheng Chen, Ceyuan Yang, Sida Peng, Yujun Shen, and Gordon Wetzstein. 2024a. Grm: Large gaussian reconstruction model for efficient 3d reconstruction and generation. ECCV (2024).   \nYinghao Xu, Hao Tan, Fujun Luan, Sai Bi, Peng Wang, Jiahao Li, Zifan Shi, Kalyan Sunkavalli, Gordon Wetzstein, Zexiang Xu, and Kai Zhang. 2024b. DMV3D: Denoising Multi-View Diffusion using 3D Large Reconstruction Model. ICLR (2024).   \nJiawei Yang, Marco Pavone, and Yue Wang. 2023. FreeNeRF: Improving Few-Shot Neural Rendering with Free Frequency Regularization. In 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 8254–8263. https://doi.org/10. 1109/CVPR52729.2023.00798   \nTaoran Yi, Jiemin Fang, Junjie Wang, Guanjun Wu, Lingxi Xie, Xiaopeng Zhang, Wenyu Liu, Qi Tian, and Xinggang Wang. 2024. GaussianDreamer: Fast Generation from Text to 3D Gaussians by Bridging 2D and 3D Diffusion Models. CVPR (2024).   \nZehao Yu, Torsten Sattler, and Andreas Geiger. 2024. Gaussian Opacity Fields: Efficient High-quality Compact Surface Reconstruction in Unbounded Scenes. arXiv:2404.10772 (2024).   \nKai Zhang, Sai Bi, Hao Tan, Yuanbo Xiangli, Nanxuan Zhao, Kalyan Sunkavalli, and Zexiang Xu. 2024. GS-LRM: Large Reconstruction Model for 3D Gaussian Splatting. arXiv (2024).   \nLvmin Zhang, Anyi Rao, and Maneesh Agrawala. 2023a. Adding conditional control to text-to-image diffusion models. In Proceedings of the IEEE/CVF International Conference on Computer Vision. 3836–3847.   \nLvmin Zhang, Anyi Rao, and Maneesh Agrawala. 2023b. ControlNet-v1-1-nightly. https://github.com/lllyasviel/ControlNet-v1-1-nightly.   \nRichard Zhang, Phillip Isola, Alexei A Efros, Eli Shechtman, and Oliver Wang. 2018. The unreasonable effectiveness of deep features as a perceptual metric. In Proceedings of the IEEE conference on computer vision and pattern recognition. 586–595.   \nZhizhuo Zhou and Shubham Tulsiani. 2023. SparseFusion: Distilling View-Conditioned Diffusion for 3D Reconstruction. In 2023 IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR). 12588–12597. https://doi.org/10.1109/CVPR52729. 2023.01211   \nJunzhe Zhu and Peiye Zhuang. 2024. HiFA: High-fidelity Text-to-3D Generation with Advanced Diffusion Guidance. ICLR (2024).   \nZehao Zhu, Zhiwen Fan, Yifan Jiang, and Zhangyang Wang. 2024. FSGS: Real-Time Few-shot View Synthesis using Gaussian Splatting. ECCV (2024).   \nZi-Xin Zou, Zhipeng Yu, Yuan-Chen Guo, Yangguang Li, Ding Liang, Yan-Pei Cao, and Song-Hai Zhang. 2024. Triplane Meets Gaussian Splatting: Fast and Generalizable Single-View 3D Reconstruction with Transformers. CVPR (2024). ",
        "page_idx": 9
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 10
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 11
    },
    {
        "type": "text",
        "text": "A APPENDIX ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "The contents of this appendix include: ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "(1) Dataset Details (A.1).   \n(2) Implementation Details (A.2).   \n(3) Experiment Details of Comparison (A.3).   \n(4) More Experimental Results (A.4).   \n(5) Ablation Study Details (A.5).   \n(6) Supplementary Video Descriptions (A.6). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "A.1 Dataset Details ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "To ensure a rigorous evaluation, we employ SAM-based methods [Cen et al. 2023; Kirillov et al. 2023] to generate consistent object masks of test views. While this process is necessary for benchmarking in our study, it is not required for practical applications. In real-world scenarios, the system necessitates only four masks from captured images, which are straightforward to obtain with any segmentation method. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "MipNeRF360. The sparse MipNeRF360 dataset, derived from the dataset provided by Barron et al. [2021], focuses on three scenes containing a primary object: bonsai, garden, and kitchen. For performance evaluation, the scenes are tested using images downsampled by a factor of 4×, following the train-test splits from Wu et al. [2024]. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "OmniObject3D. OmniObject3D includes 6k real 3D objects in 190 large-vocabulary categories. We selected 17 objects from OmniObject3D [Wu et al. 2023]. The items chosen include: back-pack_016, box_043, broccoli_003, corn_007, dinosaur_006, flower_pot_007, gloves_009, guitar_002, hamburger_012, picnic_basket_009, pineapple_013, sandwich_003, suitcase_006, timer_010, toy_plane_005, toy_truck_037, and vase_012 for a fair evaluation. We manually choose camera views for training and use every eighth view left for testing. Most scenes are originally in 1080p resolution, while gloves_009 and timer_010 are in 720p resolution. To maintain consistency across all scenes, we upscaled the images from these two scenes to 1080p resolution. All the images are downsampled to a factor of 2×. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "OpenIllumination. OpenIllumination is a real-world dataset captured by the LightStage. We use the sparse OpenIllumination dataset proposed in ZeroRF [Shi et al. 2024b]. Note that ZeroRF re-scaled and re-centered the camera poses to align the target object with the world center. We test on the sparse OpenIllumination dataset [Liu et al. 2023a] with provided object masks, which are generated by SAM and train-test splits, downscaling the images by a factor of 4×, following the same experimental setting as in Shi et al. [2024b]. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "Our-collected Unposed Images. To better align with daily usage, we captured four images of common objects using an iPhone 13 from approximately front, back, left, and right directions without strict requirements on camera positioning or angles. We employed DUSt3R [Wang et al. 2024a] to predict the camera parameters, including intrinsics and poses, for these images. Additionally, we used SAM [Kirillov et al. 2023] along with the iPhone’s native segmentation features to perform image segmentation. All comparative methods also included these camera parameters and masks. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "A.2 Implementation Details ",
        "text_level": 1,
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "We build our GaussianObject upon 3DGS [Kerbl et al. 2023] and Threestudio [Guo et al. 2023]. For visual hull reconstruction, we adopt a coarse-to-fine approach, starting with rough spatial sampling to estimate the bounding box and then proceeding to detailed sampling within it. Since the sparse input views cannot provide sufficient multi-view consistency, we reconstruct all objects with only two degrees of spherical harmonics (SH). We adopt the densification and opacity reset methods from vanilla 3DGS, conducting densification every 100 iterations and resetting opacity every 1,000 iterations. As for floater elimination, we start it from 500 iterations and conduct it every 500 iterations until 6k iterations. The adaptive threshold ?? is initially set to the mean plus the standard deviation of the average distance calculated via KNN and is linearly decreased to 0 in 6k iterations. The loss weight for Lgs is set to: ??SSIM = 0.2, ??m = 0.001 and Ld = 0.0005. ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "For the Gaussian repair model setup, we use leave-one-out training to generate image pairs and 3D Noise ???? . We use the visual hull corresponding to ?? reference images to initialize all 3DGS models during leave-one-out training. We add noises to all the attributes of 3D Gaussians except for SH coefficients. Whenever we need a data pair from adding 3D noises, we use the mean ??Δ and variance ??Δ to generate new noisy Gaussians for rendering, thus enabling sufficient data generation. All the images are constantly padded or center-cropped before being fed into the Gaussian repair model to preserve the real ratio of the target object. At the first iteration of training the Gaussian repair model, manual noise generated according to distribution is used for training with a 100% probability. Each time training is conducted with manual noise, this probability is reduced by 0.5%, to utilize cached images from leave-one-out training increasingly, as illustrated in Algorithm 1. Referred to Dreambooth [Ruiz et al. 2023], the [V] used for objectspecific text prompt is “xxy5syt00”. We apply LoRA [Hu et al. 2022] in the fine-tuning process. LoRA optimizes a learnable low-rank residual matrix Δ???? = ???? ???? , where ???? ∈ R??×?? , ???? ∈ R?? ×??. The hyperparameter of the LoRA rank ?? ≪ ??, ??. We add LoRA layers to all embedding, linear, and convolution layers of the transformer blocks in the diffusion U-Net, the ControlNet U-Net, and the CLIP model. LoRA rank ?? is set to 64, and the learning rate is set to 10−3. We fine-tune the Gaussian repair model for 1800 steps, optimized using an AdamW optimizer [Loshchilov and Hutter 2019] with ?? values of (0.9, 0.999). ",
        "page_idx": 12
    },
    {
        "type": "text",
        "text": "For the Gaussian repair process, we optimize the coarse 3DGS model for 4k steps, involving both a reference image and a repaired novel view image for the first 2800 steps supervised by Lrep and Lgs together, with the weight of Lrep progressively decayed from 1.0 to 0.1. The final 1200-step training only involves reference views. Based on the camera poses of ?? reference views, we estimate an elliptic trajectory that encircles the object and find ?? points on the trajectory closest to the reference views, respectively. These ?? points divide the ellipse into ?? segments of the arc. On each arc segment, novel views are only sampled from the middle 80% of the arc (repair path). The remaining arcs constitute reference paths. To expedite training, we avoid using the time-consuming DDIM process [Song et al. 2021] for every novel view rendering. Instead, ",
        "page_idx": 12
    },
    {
        "type": "image",
        "img_path": "images/e345aebafe3c90dc89b4ba0a3e17ca22b1c402a68d0aff6f9f86e8a57b9b38fb.jpg",
        "image_caption": [
            "Fig. 14. Performance of CF-GaussianObject among iPhone captured images. By introducing modified DUSt3R into our GaussianObject, we successfull achieve COLMAP-free reconstruction from extremely sparse views. "
        ],
        "image_footnote": [],
        "page_idx": 13
    },
    {
        "type": "image",
        "img_path": "images/620d39efa7ab535547c37917e7479fe08e3c68fdaa7d3f1a68e5effd39583f23.jpg",
        "image_caption": [
            "Fig. 15. Point clouds of GaussianObject before and after Gaussian repair. In the dinosaur scene, the Gaussian repair model significantly enhances the point cloud density, resulting in a more distinct and clear representation of the dinosaur’s body. In the vase scene, noticeable artifacts around the handle and the mouth are effectively eliminated by the Gaussian repair model, and the incomplete bottom of the vase is repaired. These key areas are highlighted with blue boxes. "
        ],
        "image_footnote": [],
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Algorithm 1 Gaussian Repair Model Data Generation Algorithm ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "Input: Gaussian Repair Model R, Coarse 3DGS Model G?? , Mean   \n??Δ,?? and Variance ??Δ,?? for Each Attribute ?? of G?? , ?? Leave-one   \n1: ??manual ← 1 out 3DGS Models {Gˆ???? }?? −1??=0   \n2: Sample ?? from ?? [0, 1]   \n3: for each iteration do   \n4: Sample an index ?? from {0, 1, . . . , ?? − 1}   \n5: if ?? < ??manual then   \n6: G?? (???? ) ← G??   \n7: for all attribute ?? of G?? except for SH coefficients do   \n8: Sample ????,?? from ?? (??Δ,??, ??2Δ,??)   \n9: ?? ← ?? + ????,??   \n10: end for   \n11: ?? ′ ← ?? ′ (G?? (???? ), ???? )   \n12: ??manual ← 0.995 × ??manual   \n13: else   \n14: ?? ′ ← ?? ′ ( Gˆ???? , ???? )   \n15: end if   \n16: Optimize R with data pair (?? ′, ???? )   \n17: end for ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "we employ cached images for optimization. Specifically, at the beginning of every 200 iterations, we sample and repair two novel views from each repair path. Throughout these 200 iterations, we utilize these images to repair 3D Gaussians. We set the weights for Lrep as follows: ??1 = 0.5, ??2 = 0.5 and ???? = 2.0 accross all experiments. We employ densification and opacity resetting to regulate the number of Gaussians. The Gaussian densification process is effective from 400 to 3600 steps. The Gaussian model undergoes densification and pruning at intervals of every 100 steps, and its opacity is reset every 500 steps. ",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "For CF-GaussianObject, we modify the DUSt3R [Wang et al. 2024a] pipeline to better suit our task. We assume that all cameras share the same intrinsic, while the original DUSt3R predicts different camera focal lengths for each view. We initially use the average camera focal estimated from input views and further optimize it using DUSt3R’s global optimization process. Background points are removed from DUSt3R’s point cloud P using object masks and the predicted camera poses via a back-projection algorithm. The resultant P is much sparser than the visual hull point cloud, missing points on unseen surfaces and object fillers. we augment P with 10% of the points from the visual hull point cloud to densify the initial 3D Gaussian points. During the first 4000 steps of the 3DGS initial optimization process, we employ the tracking losses from MonoGS [Matsuki et al. 2024] and InstantSplat [Fan et al. 2024] to further optimize the camera poses Πˆ ref predicted by DUSt3R. ",
        "page_idx": 14
    },
    {
        "type": "equation",
        "img_path": "images/ba8eacfed862f2da7fb6fef5c3c28f31ee8c6543e064b2c4f843be86b66fd5f3.jpg",
        "page_idx": 14
    },
    {
        "type": "text",
        "text": "where ??ˆref∗ denotes the refined camera pose, and ??ˆref0 represents the initial camera pose from DUSt3R. ??pose is introduced to ensure the refined poses do not deviate excessively from the initial ones, which is set to 0.0005 in our experiments. To evaluate CF-GaussianObject, we align the SfM camera poses with the noisy ones and optimize each test camera for up to 400 steps with the same loss during test time. ",
        "page_idx": 14
    },
    {
        "type": "image",
        "img_path": "images/4d557f265096d1f027ca6eb8eea6e9d1478028181f3ce986491fc3d10d3f33a6.jpg",
        "image_caption": [
            "Fig. 16. Qualitative comparisons between DUSt3R and CF-GaussianObject with four input views. "
        ],
        "image_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.3 Experiment Details of Comparison ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "FSGS [Zhu et al. 2024] requires SfM points generated from the input images, which are too sparse in our setting of 4 input views. Alternatively, we randomly pick ??pick points from the SfM points with full images as input: ",
        "page_idx": 15
    },
    {
        "type": "equation",
        "img_path": "images/88ceecf51eb62ee5f87e7a60280c9788b2ca0998a3eee9a636c14f46d33fbb69.jpg",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "where ??sparse is the number of input images, ??all is the total number of images, and ??all is the total number of points. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.4 More Experimental Results ",
        "text_level": 1,
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.4.1 Per-scene Performance. We provide per-scene qualitative metrics of MipNeRF360 in Tab. 10, Tab. 11 and Tab. 12; of OmniObject3D in Tab. 13, Tab. 14, Tab. 15, Tab. 16, Tab. 17 and Tab. 18; of OpenIllumination in Tab. 19 and Tab. 20. Additional qualitative comparisons on the OpenIllumination dataset are shown in Fig. 19. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.4.2 Performance of CF-GaussianObject. Our COLMAP-free CFGaussianObject bypasses the traditional Structure-from-Motion (SfM) pipeline requirements, enabling application to casually captured images. Utilizing an iPhone 13, we capture four images of common objects and obtain their corresponding masks using SAM [Kirillov et al. 2023]. We then employ CF-GaussianObject for the reconstruction of these images, with the results of the novel view synthesis displayed in Fig. 14. CF-GaussianObject delivers high-quality reconstructions from just four images without the need for precise camera parameters, producing images with exceptional visual quality and detailed richness. These results underscore CF-GaussianObject’s effectiveness in achieving high-fidelity reconstruction from sparsely captured real-world images, showcasing its substantial potential for practical applications. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.4.3 Comparison with DUSt3R. To further show the effectiveness of our design, we present qualitative comparisons between CFGaussianObject and DUSt3R [Wang et al. 2024a] in Fig. 16. These results confirm that the strong performance stems from our design. Overall, these findings highlight the generalizability of CFGaussianObject and its potential for real-world applications. ",
        "page_idx": 15
    },
    {
        "type": "image",
        "img_path": "images/0c79c922849cf22ee5b108406b922d4c3edcd8e412f5311c82d80c9b67d21887.jpg",
        "image_caption": [
            "Fig. 17. Rendering performance with varying training views. "
        ],
        "image_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.4.4 Influence of Gaussian repair process. We provide extra validations on our Gaussian repair process. Figure 15 illustrates the distribution of coarse 3D Gaussians and the refined distribution after the Gaussian repair. This comparison clearly demonstrates the significant enhancement in geometry achieved by our repair process. We also provide qualitative samples of the Gaussian repair model in Fig. 20, showing that the Gaussian repair model can effectively generate high-quality and consistent images from multiple views. ",
        "page_idx": 15
    },
    {
        "type": "table",
        "img_path": "images/44b5b78d1c39f422bc75093293e1458279ad9ee3bf9f4d16d30ddb9090b4cdfb.jpg",
        "table_caption": [
            "Table 7. Comparison of training time on one single RTX 3090 GPU. "
        ],
        "table_footnote": [],
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "A.4.5 Training Time Comparison. We show the training time of GaussianObject and the various baselines on one single RTX 3090 GPU in Table 7. GaussianObject can be finished around 30 minutes, much faster than previous methods with higher quality. The process breakdown for GaussianObject is as follows: Initial optimization with structure priors takes approximately 1 minute; Gaussian repair model setup requires about 15 minutes; and Gaussian repair with distance-aware sampling lasts around 14 minutes. ",
        "page_idx": 15
    },
    {
        "type": "text",
        "text": "For the COLMAP-free version, we incorporate a customized diffgaussian-rasterization module during the coarse GS optimization. This module, which is not used in the standard GaussianObject nor the repair model setup and Gaussian repair, necessitates additional computations for gradient descent on camera poses and uses a faster rasterization module elsewhere. The training time for CFGaussianObject typically totals about 33 minutes, broken down as follows: DUSt3R [Wang et al. 2024a] completes in roughly 17 seconds; initial optimization with structure priors takes about 3 minutes due to the customized diff-gaussian-rasterization module; Gaussian repair model setup remains at 15 minutes; and Gaussian repair with distance-aware sampling also takes about 14 minutes. ",
        "page_idx": 15
    },
    {
        "type": "table",
        "img_path": "images/511423fe09360dbf0fd5801e1e8220137366d0764beea702c745b2fffb8c8d95.jpg",
        "table_caption": [
            "Table 8. Robustness among randomness on MipNeRF360 dataset. "
        ],
        "table_footnote": [],
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "A.4.6 Robustness of Random Noise. Diffusion models rely on adding random noise followed by denoising to generate images; hence, their performance is heavily dependent on the random seed used. GaussianObject also employs a diffusion model to refine 3D Gaussian, so the diversity inherent in diffusion could affect the reconstruction quality of GaussianObject. To mitigate this diversity, we finetune the diffusion model and devise a distance-aware sampling strategy for Gaussian repair. To validate this, we conduct 10 independent experiments with different random seeds, and the results are presented in Table 8. Experimental results confirm the effectiveness of our design, demonstrating that randomness has little influence on our performance. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "A.4.7 Performance on Reference and Repair Path. The rendering capabilities of GaussianObject are evaluated on both the reference and repair paths. To ensure the utmost fidelity to the reference views, the Gaussian repair process is exclusively applied along the repair path. Fig. 18 illustrates that GaussianObject delivers exceptional visual quality across both the reference and repair paths. Such results highlight the efficacy of our Gaussian repair process. GaussianObject consistently produces high fidelity and visual excellence renderings, irrespective of whether the views are from regions with sufficient or insufficient coverage. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "A.4.8 Performance with Varying Views. We demonstrate the performance of GaussianObject under various training views in Fig. 17. As more views are provided, GaussianObject can reconstruct more details. This demonstrates the model’s capacity to leverage additional perspectives for improved accuracy and detail in the reconstructed output. Specifically, with an increasing number of views, the visual quality of the renderings was significantly enhanced, reducing artifacts and producing finer details. This improvement highlights the robustness and scalability of GaussianObject in handling complex visual data. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "A.4.9 Performance with view distribution. In this study, we evaluate the performance of GaussianObject on the ‘kitchen’ scene from the MipNeRF360 dataset across various view distributions. We systematically report the angles between input views in the ‘view distribution’ column of Table 9, with the first row reflecting the configuration used in the manuscript. Results reveal that GaussianObject consistently achieves robust performance across diverse view distributions, a capability that eludes many current Large Reconstruction Models (LRMs) [Tang et al. 2024a; Xu et al. 2024a; Zhang et al. 2024]. This robustness is crucial for practical applications where varied viewpoints are common. ",
        "page_idx": 16
    },
    {
        "type": "table",
        "img_path": "images/6df6c40d1dafa3b5dded05e2ccc8e3c5ab17bb0658ee6cef8b60f86d1b2acdfd.jpg",
        "table_caption": [
            "Table 9. Performance in terms of view distribution. "
        ],
        "table_footnote": [],
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "A.5 Ablation Study Details ",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "We employ ControlNet-Tile [Zhang et al. 2023a,b] as the Gaussian repair model of GaussianObject. ControlNet-Tile, based on Stable Diffusion v1.5, is designed to repair low-resolution or low-fidelity images by taking them as conditions. In our ablation study, we use other diffusion models as our Gaussian repair model in Sec.4.4. First, we use Stable Diffusion XL Image-to-Image [Meng et al. 2022], which cannot directly take images as input conditions. Therefore, we add 50% Gaussian noise to the novel view images and use the model to generate high-fidelity images by denoising the noisy images. Additionally, we evaluate ControlNet-ZoeDepth based on Stable Diffusion XL. ControlNet-ZoeDepth, which takes the ZoeDepth [Bhat et al. 2023] as a condition, is used to generate images aligned with the depth map. However, ZoeDepth may incorrectly assume that a single object with a white background is on a white table, leading to erroneous depth map predictions. In such cases, we test two settings: one using the entire predicted depth map and another using the object-masked depth map. Due to the ambiguity of monocular predicted depth, we add partial noise on the input image to preserve the image information, similar to SDEdit. Specifically, we add 50% Gaussian noise to the novel view images and set the weight scale of the ControlNet model to 0.55. In this experimental setup, we obtained the results of the ablation experiments on the structure of the Gaussian repair model. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "A.6 Supplementary Video Descriptions ",
        "text_level": 1,
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "We prepare four sets of video comparisons for evaluation. The first set, videos_1, features videos rendered along trajectories encircling several objects, showcasing the performance of all tested models. These videos are organized by scene and the number of input views and are placed in different directories for ease of analysis. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "In the second video set, videos_2, we provide more experiment videos. Each video is edited to demonstrate our results clearly. The video titled refresh.mp4 compares all the tested models with GaussianObject on 9 scenes with 4 input views. Videos labeled with the suffix _compare.mp4 focus on comparing individual methods with GaussianObject. The video titled transfer_3DGS_to_GaussianObject.mp4 sequentially illustrates the enhancements we have implemented on the 3DGS, detailing each step of our improvement process. Additionally, the video COLMAP_free.mp4 shows our COLMAP-free experiments using our own collected unposed images, presenting both the input images and reconstruction results, along with comparisons to other methods. ",
        "page_idx": 16
    },
    {
        "type": "text",
        "text": "In the third video set, videos_3, we present videos from COLMAPfree experiments. Each video is labeled according to the dataset, scene, and number of input views involved in the experiment. ",
        "page_idx": 16
    },
    {
        "type": "image",
        "img_path": "images/0ff29fced988b3291b5f7693519d22bb009e5be98f8e5252da335265a4304c1a.jpg",
        "image_caption": [
            "Fig. 18. Qualitative results from reference and repair path. The first row displays the four reference views, the second row shows the renderings from the reference path and the third row shows the renderings from the repair path. GaussianObject achieves high-quality renderings on both reference and repair paths, indicating the effectiveness of our Gaussian repair process. "
        ],
        "image_footnote": [],
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "In the last video set, videos_4, we provide input images and results from COLMAP-free experiments using our own collected unposed images. A subfolder named other_methods includes videos of reconstruction results obtained by other methods. ",
        "page_idx": 17
    },
    {
        "type": "text",
        "text": "",
        "page_idx": 17
    },
    {
        "type": "image",
        "img_path": "images/7246ae7773cebb29411869e45c933d56be0ea507795d286639e5b9bf1f95cbb6.jpg",
        "image_caption": [
            "Fig. 19. Qualitative examples on the OpenIllumination dataset with four input views. "
        ],
        "image_footnote": [],
        "page_idx": 18
    },
    {
        "type": "image",
        "img_path": "images/b4e997fe77e7bc94268b28b4197eaa65d0fa54b1cb95f1c0464602278bbd0c80.jpg",
        "image_caption": [
            "Fig. 20. Qualitative samples of the Gaussian repaired models on several scenes from different views. "
        ],
        "image_footnote": [],
        "page_idx": 19
    },
    {
        "type": "table",
        "img_path": "images/5e414208e1493268c9d9642c8d491e56fa1bf4295cffc7cb575b4c671778629a.jpg",
        "table_caption": [
            "Table 10. Comparisons of per-scene metrics of MipNeRF360 with 4 input views. "
        ],
        "table_footnote": [],
        "page_idx": 20
    },
    {
        "type": "table",
        "img_path": "images/5ed39eb81cf8276a126956d9d795a6f187c7a4991b67799b4301fdebf96fb4bd.jpg",
        "table_caption": [
            "Table 11. Comparisons of per-scene metrics of MipNeRF360 with 6 input views. "
        ],
        "table_footnote": [],
        "page_idx": 20
    },
    {
        "type": "table",
        "img_path": "images/3ed484dc1c0ebae7020e29b8cae08eb38e0328c94ad815f26f5f4ecaf619f4ae.jpg",
        "table_caption": [
            "Table 12. Comparisons of per-scene metrics of MipNeRF360 with 9 input views. "
        ],
        "table_footnote": [],
        "page_idx": 20
    },
    {
        "type": "table",
        "img_path": "images/4dda5803c03fa20ddea70c681ea8e11cfb2aa3bfd45ab537be8fd3c41178743e.jpg",
        "table_caption": [
            "Table 13. Comparisons of per-scene metrics of OmniObject3D with 4 input views. "
        ],
        "table_footnote": [],
        "page_idx": 21
    },
    {
        "type": "table",
        "img_path": "images/039caf47847226aebcfcdc23109ed98019e0bd76a90b7c32160d3028895dccf5.jpg",
        "table_caption": [
            "Table 14. Comparisons of per-scene metrics of OmniObject3D with 4 input views. continued "
        ],
        "table_footnote": [],
        "page_idx": 22
    },
    {
        "type": "table",
        "img_path": "images/5796783da9ca73db0c8003b878b8b6181be0b33362d10a5e013209e24b28ae3b.jpg",
        "table_caption": [
            "Table 15. Comparisons of per-scene metrics of OmniObject3D with 6 input views. "
        ],
        "table_footnote": [],
        "page_idx": 23
    },
    {
        "type": "table",
        "img_path": "images/9efed9fad2b3be4aa9913767a24fb640fd979a53a841aff12593f85a4e95d3ed.jpg",
        "table_caption": [
            "Table 16. Comparisons of per-scene metrics of OmniObject3D with 6 input views. continued "
        ],
        "table_footnote": [],
        "page_idx": 24
    },
    {
        "type": "table",
        "img_path": "images/6f8c41936babd309c13ef7f3a760b96f3b4985f5ffb83c3be6004bb08c28a107.jpg",
        "table_caption": [
            "Table 17. Comparisons of per-scene metrics of OmniObject3D with 9 input views. "
        ],
        "table_footnote": [],
        "page_idx": 25
    },
    {
        "type": "table",
        "img_path": "images/46956a9795e8f4e6d79b67e7dfd145d223b80a977cc8b8d025026452dd2cff96.jpg",
        "table_caption": [
            "Table 18. Comparisons of per-scene metrics of OmniObject3D with 9 input views. continued "
        ],
        "table_footnote": [],
        "page_idx": 26
    },
    {
        "type": "table",
        "img_path": "images/ceb64f1e11b82fbc4dcf08207f00a72de4063d15441ab775b86c0861b58eb548.jpg",
        "table_caption": [
            "Table 19. Comparisons of per-scene metrics of OpenIllumination with 4 input views. Methods with †means the metrics are from the ZeroRF paper [Shi et al. 2024b]. "
        ],
        "table_footnote": [],
        "page_idx": 26
    },
    {
        "type": "table",
        "img_path": "images/3fc2b0c35c4b2cfe17af48b889ab0357b08596cf8d6138fb20289c65b119a005.jpg",
        "table_caption": [
            "Table 20. Comparisons of per-scene metrics of OpenIllumination with 6 input views. Methods with †means the metrics are from the ZeroRF paper [Shi et al. 2024b]. "
        ],
        "table_footnote": [],
        "page_idx": 27
    }
]