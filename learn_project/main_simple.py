#!/usr/bin/env python3
"""
Simplified main entry point for LEARN system (general topics only)
"""

import sys
import os
import subprocess
from pathlib import Path

# Add parent directory to path
sys.path.insert(0, str(Path(__file__).parent.parent))

from learn_project.utils import parse_learn_command, create_project_structure


def create_general_learning_project(parsed_params):
    """Create a general learning project without PDF dependencies."""
    topic = parsed_params["topic"]
    mode = parsed_params["mode"]
    style = parsed_params["style"]
    
    print(f"Creating learning project for: {topic}")
    print(f"Mode: {mode}, Style: {style}")
    
    # Create project structure
    project_path = create_project_structure("learn_project", topic)
    
    # Create tutorial.md
    tutorial_content = f"""# {topic} Tutorial

## Overview
This tutorial covers **{topic}** in **{mode}** mode with **{style}** style.

## Learning Objectives
By the end of this tutorial, you will understand:
- Core concepts of {topic}
- Practical applications
- Best practices and common pitfalls

## Getting Started
[Content to be expanded based on the topic]

## Key Concepts
[Main concepts will be detailed here]

## Examples
[Practical examples will be provided]

## Exercises
[Hands-on exercises for practice]

## Resources
- Official documentation
- Community resources
- Further reading

---
*Generated by LEARN system*
"""
    
    # Create questions.md with detailed questions
    questions_content = f"""# Questions for {topic}

## Foundational Questions

### Question 1: Core Concepts
What are the fundamental concepts of {topic}?

<details>
<summary>Click to see approach</summary>
Identify the key terminology, principles, and foundational ideas that form the basis of {topic}.
</details>

### Question 2: Problem Solving
What types of problems does {topic} help solve?

<details>
<summary>Click to see approach</summary>
Consider the practical applications and use cases where {topic} is most valuable.
</details>

### Question 3: Implementation
How would you implement a basic example using {topic}?

<details>
<summary>Click to see approach</summary>
Think about the step-by-step process and required components for a simple implementation.
</details>

## Intermediate Questions

### Question 4: Best Practices
What are the best practices when working with {topic}?

<details>
<summary>Click to see approach</summary>
Consider common patterns, conventions, and recommended approaches in the field.
</details>

### Question 5: Common Pitfalls
What are common mistakes or pitfalls to avoid with {topic}?

<details>
<summary>Click to see approach</summary>
Think about typical errors beginners make and how to avoid them.
</details>

### Question 6: Comparison
How does {topic} compare to similar approaches or technologies?

<details>
<summary>Click to see approach</summary>
Analyze the strengths and weaknesses relative to alternatives.
</details>

## Advanced Questions

### Question 7: Optimization
How can you optimize performance when using {topic}?

<details>
<summary>Click to see approach</summary>
Consider efficiency improvements, scaling considerations, and performance tuning.
</details>

### Question 8: Integration
How does {topic} integrate with other systems or technologies?

<details>
<summary>Click to see approach</summary>
Think about ecosystem compatibility and integration patterns.
</details>

### Question 9: Future Trends
What are the emerging trends and future directions for {topic}?

<details>
<summary>Click to see approach</summary>
Consider ongoing developments and potential evolution of the field.
</details>

## Reflection Questions

### Question 10: Personal Application
How might you apply {topic} in your own projects or work?

<details>
<summary>Click to see approach</summary>
Reflect on specific use cases relevant to your interests and goals.
</details>

### Question 11: Learning Path
What should you learn next to deepen your understanding of {topic}?

<details>
<summary>Click to see approach</summary>
Consider advanced topics, related technologies, or specialized areas to explore.
</details>

### Question 12: Teaching Others
How would you explain {topic} to someone who is completely new to it?

<details>
<summary>Click to see approach</summary>
Think about simplifying complex concepts and using analogies or examples.
</details>

"""
    
    # Create README.md
    readme_content = f"""# {topic} Learning Project

## Overview
This project contains learning materials for **{topic}** generated in **{mode}** mode with **{style}** style.

## Project Structure
- `tutorial.md` - Main tutorial content
- `questions.md` - Comprehensive questions for self-assessment
- `src/` - Example code and exercises (to be added)
- `docs/` - Additional documentation

## How to Use This Project

### Step 1: Study the Tutorial
Start with `tutorial.md` to get a comprehensive overview of {topic}.

### Step 2: Practice with Questions
Work through the questions in `questions.md` to test your understanding:
- Start with foundational questions
- Progress to intermediate concepts
- Challenge yourself with advanced questions
- Reflect on personal applications

### Step 3: Hands-on Practice
Use the `src/` directory for practical exercises and example code.

## Learning Tips
- Take notes while reading the tutorial
- Try to answer questions before looking at the approaches
- Practice implementing concepts in your own projects
- Join communities related to {topic} for discussion and support

## Next Steps
After completing this learning project, consider:
- Building a project using {topic}
- Exploring advanced topics
- Contributing to open-source projects
- Teaching others what you've learned

---
*Generated by LEARN system*
"""
    
    # Write files
    tutorial_path = project_path / "tutorial.md"
    questions_path = project_path / "questions.md"
    readme_path = project_path / "README.md"
    
    with open(tutorial_path, 'w', encoding='utf-8') as f:
        f.write(tutorial_content)
    
    with open(questions_path, 'w', encoding='utf-8') as f:
        f.write(questions_content)
    
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write(readme_content)
    
    return {
        "success": True,
        "project_path": str(project_path),
        "created_files": [str(tutorial_path), str(questions_path), str(readme_path)]
    }


def main():
    """Main entry point."""
    if len(sys.argv) < 2:
        print("Usage: python main_simple.py 'LEARN command'")
        sys.exit(1)
    
    command = ' '.join(sys.argv[1:])
    
    # Parse the command
    parsed = parse_learn_command(command)
    
    if parsed["is_paper"]:
        print("❌ Paper learning requires the full system with PDF extractor.")
        print("   Please use the complete learn_project system for paper learning.")
        sys.exit(1)
    
    # Process general topic
    result = create_general_learning_project(parsed)
    
    if result["success"]:
        print(f"\n✅ Learning project created successfully!")
        print(f"📁 Project path: {result['project_path']}")
        print("\n📝 Created files:")
        for file_path in result["created_files"]:
            print(f"   - {file_path}")
        
        print(f"\n🎯 Next steps:")
        print(f"   1. Review the tutorial.md")
        print(f"   2. Work through the questions.md")
        print(f"   3. Start building your own projects!")
    else:
        print(f"❌ Error: {result.get('error', 'Unknown error')}")
        sys.exit(1)


if __name__ == "__main__":
    main() 